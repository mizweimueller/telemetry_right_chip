
migrated_sx1278_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004200  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004528  08004528  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004530  08004530  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000070  080045a8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080045a8  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2b8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f02  00000000  00000000  0002b351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001873f  00000000  00000000  0002e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d2d  00000000  00000000  00046c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086344  00000000  00000000  0005096c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6cb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000307c  00000000  00000000  000d6d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080042f8 	.word	0x080042f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080042f8 	.word	0x080042f8

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000164:	f000 b96e 	b.w	8000444 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	f040 8083 	bne.w	8000298 <__udivmoddi4+0x118>
 8000192:	428a      	cmp	r2, r1
 8000194:	4617      	mov	r7, r2
 8000196:	d947      	bls.n	8000228 <__udivmoddi4+0xa8>
 8000198:	fab2 f382 	clz	r3, r2
 800019c:	b14b      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019e:	f1c3 0120 	rsb	r1, r3, #32
 80001a2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001a6:	fa20 f101 	lsr.w	r1, r0, r1
 80001aa:	409f      	lsls	r7, r3
 80001ac:	ea41 0e0e 	orr.w	lr, r1, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001b6:	fbbe fcf8 	udiv	ip, lr, r8
 80001ba:	fa1f f987 	uxth.w	r9, r7
 80001be:	fb08 e21c 	mls	r2, r8, ip, lr
 80001c2:	fb0c f009 	mul.w	r0, ip, r9
 80001c6:	0c21      	lsrs	r1, r4, #16
 80001c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	18ba      	adds	r2, r7, r2
 80001d2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80001d6:	f080 8118 	bcs.w	800040a <__udivmoddi4+0x28a>
 80001da:	4290      	cmp	r0, r2
 80001dc:	f240 8115 	bls.w	800040a <__udivmoddi4+0x28a>
 80001e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80001e4:	443a      	add	r2, r7
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f8 	udiv	r0, r2, r8
 80001ec:	fb08 2210 	mls	r2, r8, r0, r2
 80001f0:	fb00 f109 	mul.w	r1, r0, r9
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a1      	cmp	r1, r4
 80001fc:	d909      	bls.n	8000212 <__udivmoddi4+0x92>
 80001fe:	193c      	adds	r4, r7, r4
 8000200:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000204:	f080 8103 	bcs.w	800040e <__udivmoddi4+0x28e>
 8000208:	42a1      	cmp	r1, r4
 800020a:	f240 8100 	bls.w	800040e <__udivmoddi4+0x28e>
 800020e:	3802      	subs	r0, #2
 8000210:	443c      	add	r4, r7
 8000212:	1a64      	subs	r4, r4, r1
 8000214:	2100      	movs	r1, #0
 8000216:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800021a:	b11e      	cbz	r6, 8000224 <__udivmoddi4+0xa4>
 800021c:	2200      	movs	r2, #0
 800021e:	40dc      	lsrs	r4, r3
 8000220:	e9c6 4200 	strd	r4, r2, [r6]
 8000224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000228:	b902      	cbnz	r2, 800022c <__udivmoddi4+0xac>
 800022a:	deff      	udf	#255	; 0xff
 800022c:	fab2 f382 	clz	r3, r2
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14f      	bne.n	80002d4 <__udivmoddi4+0x154>
 8000234:	1a8d      	subs	r5, r1, r2
 8000236:	2101      	movs	r1, #1
 8000238:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800023c:	fa1f f882 	uxth.w	r8, r2
 8000240:	fbb5 fcfe 	udiv	ip, r5, lr
 8000244:	fb0e 551c 	mls	r5, lr, ip, r5
 8000248:	fb08 f00c 	mul.w	r0, r8, ip
 800024c:	0c22      	lsrs	r2, r4, #16
 800024e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000252:	42a8      	cmp	r0, r5
 8000254:	d907      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000256:	197d      	adds	r5, r7, r5
 8000258:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800025c:	d202      	bcs.n	8000264 <__udivmoddi4+0xe4>
 800025e:	42a8      	cmp	r0, r5
 8000260:	f200 80e9 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 8000264:	4694      	mov	ip, r2
 8000266:	1a2d      	subs	r5, r5, r0
 8000268:	fbb5 f0fe 	udiv	r0, r5, lr
 800026c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000270:	fb08 f800 	mul.w	r8, r8, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027a:	45a0      	cmp	r8, r4
 800027c:	d907      	bls.n	800028e <__udivmoddi4+0x10e>
 800027e:	193c      	adds	r4, r7, r4
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000284:	d202      	bcs.n	800028c <__udivmoddi4+0x10c>
 8000286:	45a0      	cmp	r8, r4
 8000288:	f200 80d9 	bhi.w	800043e <__udivmoddi4+0x2be>
 800028c:	4610      	mov	r0, r2
 800028e:	eba4 0408 	sub.w	r4, r4, r8
 8000292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000296:	e7c0      	b.n	800021a <__udivmoddi4+0x9a>
 8000298:	428b      	cmp	r3, r1
 800029a:	d908      	bls.n	80002ae <__udivmoddi4+0x12e>
 800029c:	2e00      	cmp	r6, #0
 800029e:	f000 80b1 	beq.w	8000404 <__udivmoddi4+0x284>
 80002a2:	2100      	movs	r1, #0
 80002a4:	e9c6 0500 	strd	r0, r5, [r6]
 80002a8:	4608      	mov	r0, r1
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d14b      	bne.n	800034e <__udivmoddi4+0x1ce>
 80002b6:	42ab      	cmp	r3, r5
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0x140>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 80b9 	bhi.w	8000432 <__udivmoddi4+0x2b2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb65 0303 	sbc.w	r3, r5, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	469e      	mov	lr, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d0aa      	beq.n	8000224 <__udivmoddi4+0xa4>
 80002ce:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d2:	e7a7      	b.n	8000224 <__udivmoddi4+0xa4>
 80002d4:	409f      	lsls	r7, r3
 80002d6:	f1c3 0220 	rsb	r2, r3, #32
 80002da:	40d1      	lsrs	r1, r2
 80002dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	fa24 f202 	lsr.w	r2, r4, r2
 80002f0:	409d      	lsls	r5, r3
 80002f2:	fb00 fc08 	mul.w	ip, r0, r8
 80002f6:	432a      	orrs	r2, r5
 80002f8:	0c15      	lsrs	r5, r2, #16
 80002fa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80002fe:	45ac      	cmp	ip, r5
 8000300:	fa04 f403 	lsl.w	r4, r4, r3
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x19a>
 8000306:	197d      	adds	r5, r7, r5
 8000308:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800030c:	f080 808f 	bcs.w	800042e <__udivmoddi4+0x2ae>
 8000310:	45ac      	cmp	ip, r5
 8000312:	f240 808c 	bls.w	800042e <__udivmoddi4+0x2ae>
 8000316:	3802      	subs	r0, #2
 8000318:	443d      	add	r5, r7
 800031a:	eba5 050c 	sub.w	r5, r5, ip
 800031e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000322:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000326:	fb01 f908 	mul.w	r9, r1, r8
 800032a:	b295      	uxth	r5, r2
 800032c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000330:	45a9      	cmp	r9, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x1c4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800033a:	d274      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 800033c:	45a9      	cmp	r9, r5
 800033e:	d972      	bls.n	8000426 <__udivmoddi4+0x2a6>
 8000340:	3902      	subs	r1, #2
 8000342:	443d      	add	r5, r7
 8000344:	eba5 0509 	sub.w	r5, r5, r9
 8000348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800034c:	e778      	b.n	8000240 <__udivmoddi4+0xc0>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 f407 	lsr.w	r4, r5, r7
 8000360:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000364:	fbb4 f9fe 	udiv	r9, r4, lr
 8000368:	fa1f f88c 	uxth.w	r8, ip
 800036c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000370:	fa20 f307 	lsr.w	r3, r0, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	408d      	lsls	r5, r1
 800037a:	431d      	orrs	r5, r3
 800037c:	0c2b      	lsrs	r3, r5, #16
 800037e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	fa02 f201 	lsl.w	r2, r2, r1
 8000388:	fa00 f301 	lsl.w	r3, r0, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x222>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000396:	d248      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000398:	45a2      	cmp	sl, r4
 800039a:	d946      	bls.n	800042a <__udivmoddi4+0x2aa>
 800039c:	f1a9 0902 	sub.w	r9, r9, #2
 80003a0:	4464      	add	r4, ip
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003aa:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ae:	fb00 fa08 	mul.w	sl, r0, r8
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	45a2      	cmp	sl, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x24e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003c4:	d22d      	bcs.n	8000422 <__udivmoddi4+0x2a2>
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d92b      	bls.n	8000422 <__udivmoddi4+0x2a2>
 80003ca:	3802      	subs	r0, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d2:	fba0 8902 	umull	r8, r9, r0, r2
 80003d6:	eba4 040a 	sub.w	r4, r4, sl
 80003da:	454c      	cmp	r4, r9
 80003dc:	46c6      	mov	lr, r8
 80003de:	464d      	mov	r5, r9
 80003e0:	d319      	bcc.n	8000416 <__udivmoddi4+0x296>
 80003e2:	d016      	beq.n	8000412 <__udivmoddi4+0x292>
 80003e4:	b15e      	cbz	r6, 80003fe <__udivmoddi4+0x27e>
 80003e6:	ebb3 020e 	subs.w	r2, r3, lr
 80003ea:	eb64 0405 	sbc.w	r4, r4, r5
 80003ee:	fa04 f707 	lsl.w	r7, r4, r7
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431f      	orrs	r7, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c6 7400 	strd	r7, r4, [r6]
 80003fe:	2100      	movs	r1, #0
 8000400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000404:	4631      	mov	r1, r6
 8000406:	4630      	mov	r0, r6
 8000408:	e70c      	b.n	8000224 <__udivmoddi4+0xa4>
 800040a:	468c      	mov	ip, r1
 800040c:	e6eb      	b.n	80001e6 <__udivmoddi4+0x66>
 800040e:	4610      	mov	r0, r2
 8000410:	e6ff      	b.n	8000212 <__udivmoddi4+0x92>
 8000412:	4543      	cmp	r3, r8
 8000414:	d2e6      	bcs.n	80003e4 <__udivmoddi4+0x264>
 8000416:	ebb8 0e02 	subs.w	lr, r8, r2
 800041a:	eb69 050c 	sbc.w	r5, r9, ip
 800041e:	3801      	subs	r0, #1
 8000420:	e7e0      	b.n	80003e4 <__udivmoddi4+0x264>
 8000422:	4628      	mov	r0, r5
 8000424:	e7d3      	b.n	80003ce <__udivmoddi4+0x24e>
 8000426:	4611      	mov	r1, r2
 8000428:	e78c      	b.n	8000344 <__udivmoddi4+0x1c4>
 800042a:	4681      	mov	r9, r0
 800042c:	e7b9      	b.n	80003a2 <__udivmoddi4+0x222>
 800042e:	4608      	mov	r0, r1
 8000430:	e773      	b.n	800031a <__udivmoddi4+0x19a>
 8000432:	4608      	mov	r0, r1
 8000434:	e749      	b.n	80002ca <__udivmoddi4+0x14a>
 8000436:	f1ac 0c02 	sub.w	ip, ip, #2
 800043a:	443d      	add	r5, r7
 800043c:	e713      	b.n	8000266 <__udivmoddi4+0xe6>
 800043e:	3802      	subs	r0, #2
 8000440:	443c      	add	r4, r7
 8000442:	e724      	b.n	800028e <__udivmoddi4+0x10e>

08000444 <__aeabi_idiv0>:
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	78fa      	ldrb	r2, [r7, #3]
 800045a:	4611      	mov	r1, r2
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fbd0 	bl	8000c02 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fbeb 	bl	8000c42 <SX1278_hw_SPIReadByte>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2101      	movs	r1, #1
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fb88 	bl	8000b8c <SX1278_hw_SetNSS>
	return tmp;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	460b      	mov	r3, r1
 8000490:	70fb      	strb	r3, [r7, #3]
 8000492:	4613      	mov	r3, r2
 8000494:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fb75 	bl	8000b8c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	4610      	mov	r0, r2
 80004b2:	f000 fba6 	bl	8000c02 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	78ba      	ldrb	r2, [r7, #2]
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb9f 	bl	8000c02 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fb5e 	bl	8000b8c <SX1278_hw_SetNSS>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	461a      	mov	r2, r3
 80004e4:	460b      	mov	r3, r1
 80004e6:	72fb      	strb	r3, [r7, #11]
 80004e8:	4613      	mov	r3, r2
 80004ea:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004ec:	7abb      	ldrb	r3, [r7, #10]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d927      	bls.n	8000542 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb47 	bl	8000b8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	7afa      	ldrb	r2, [r7, #11]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb7b 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	75fb      	strb	r3, [r7, #23]
 8000510:	e00c      	b.n	800052c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6819      	ldr	r1, [r3, #0]
 8000516:	7dfb      	ldrb	r3, [r7, #23]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	18d4      	adds	r4, r2, r3
 800051c:	4608      	mov	r0, r1
 800051e:	f000 fb90 	bl	8000c42 <SX1278_hw_SPIReadByte>
 8000522:	4603      	mov	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	3301      	adds	r3, #1
 800052a:	75fb      	strb	r3, [r7, #23]
 800052c:	7dfa      	ldrb	r2, [r7, #23]
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3ee      	bcc.n	8000512 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fb26 	bl	8000b8c <SX1278_hw_SetNSS>
 8000540:	e000      	b.n	8000544 <SX1278_SPIBurstRead+0x6c>
		return;
 8000542:	bf00      	nop
	}
}
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd90      	pop	{r4, r7, pc}

0800054a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	461a      	mov	r2, r3
 8000556:	460b      	mov	r3, r1
 8000558:	72fb      	strb	r3, [r7, #11]
 800055a:	4613      	mov	r3, r2
 800055c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800055e:	7abb      	ldrb	r3, [r7, #10]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d929      	bls.n	80005b8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb0e 	bl	8000b8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	4610      	mov	r0, r2
 8000580:	f000 fb3f 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	75fb      	strb	r3, [r7, #23]
 8000588:	e00b      	b.n	80005a2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	f000 fb33 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	3301      	adds	r3, #1
 80005a0:	75fb      	strb	r3, [r7, #23]
 80005a2:	7dfa      	ldrb	r2, [r7, #23]
 80005a4:	7abb      	ldrb	r3, [r7, #10]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d3ef      	bcc.n	800058a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 faeb 	bl	8000b8c <SX1278_hw_SetNSS>
 80005b6:	e000      	b.n	80005ba <SX1278_SPIBurstWrite+0x70>
		return;
 80005b8:	bf00      	nop
	}
}
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f90d 	bl	80007e8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f000 fb5d 	bl	8000c8e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f917 	bl	8000808 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	f04f 0100 	mov.w	r1, #0
 80005e8:	04d9      	lsls	r1, r3, #19
 80005ea:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005ee:	04d0      	lsls	r0, r2, #19
 80005f0:	4a6f      	ldr	r2, [pc, #444]	; (80007b0 <SX1278_config+0x1f0>)
 80005f2:	f04f 0300 	mov.w	r3, #0
 80005f6:	f7ff fdab 	bl	8000150 <__aeabi_uldivmod>
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	0c02      	lsrs	r2, r0, #16
 8000610:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000614:	0c0b      	lsrs	r3, r1, #16
 8000616:	b2d3      	uxtb	r3, r2
 8000618:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800061a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	0a02      	lsrs	r2, r0, #8
 8000628:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800062c:	0a0b      	lsrs	r3, r1, #8
 800062e:	b2d3      	uxtb	r3, r2
 8000630:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000636:	f107 020c 	add.w	r2, r7, #12
 800063a:	2303      	movs	r3, #3
 800063c:	2106      	movs	r1, #6
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff83 	bl	800054a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000644:	2234      	movs	r2, #52	; 0x34
 8000646:	2139      	movs	r1, #57	; 0x39
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff1c 	bl	8000486 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7c1b      	ldrb	r3, [r3, #16]
 8000652:	461a      	mov	r2, r3
 8000654:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <SX1278_config+0x1f4>)
 8000656:	5c9b      	ldrb	r3, [r3, r2]
 8000658:	461a      	mov	r2, r3
 800065a:	2109      	movs	r1, #9
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff12 	bl	8000486 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000662:	220b      	movs	r2, #11
 8000664:	210b      	movs	r1, #11
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff0d 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800066c:	2223      	movs	r2, #35	; 0x23
 800066e:	210c      	movs	r1, #12
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff08 	bl	8000486 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7c5b      	ldrb	r3, [r3, #17]
 800067a:	461a      	mov	r2, r3
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <SX1278_config+0x1f8>)
 800067e:	5c9b      	ldrb	r3, [r3, r2]
 8000680:	2b06      	cmp	r3, #6
 8000682:	d147      	bne.n	8000714 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7c9b      	ldrb	r3, [r3, #18]
 8000688:	461a      	mov	r2, r3
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <SX1278_config+0x1fc>)
 800068c:	5c9b      	ldrb	r3, [r3, r2]
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7cdb      	ldrb	r3, [r3, #19]
 8000696:	4619      	mov	r1, r3
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <SX1278_config+0x200>)
 800069a:	5c5b      	ldrb	r3, [r3, r1]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	211d      	movs	r1, #29
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff feea 	bl	8000486 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7c5b      	ldrb	r3, [r3, #17]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <SX1278_config+0x1f8>)
 80006ba:	5c9b      	ldrb	r3, [r3, r2]
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7d1b      	ldrb	r3, [r3, #20]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <SX1278_config+0x204>)
 80006c8:	5c5b      	ldrb	r3, [r3, r1]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006d2:	3303      	adds	r3, #3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	211e      	movs	r1, #30
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff fed3 	bl	8000486 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006e0:	2131      	movs	r1, #49	; 0x31
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff feb0 	bl	8000448 <SX1278_SPIRead>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f023 0307 	bic.w	r3, r3, #7
 80006f2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f043 0305 	orr.w	r3, r3, #5
 80006fa:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2131      	movs	r1, #49	; 0x31
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff febf 	bl	8000486 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000708:	220c      	movs	r2, #12
 800070a:	2137      	movs	r1, #55	; 0x37
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff feba 	bl	8000486 <SX1278_SPIWrite>
 8000712:	e029      	b.n	8000768 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7c9b      	ldrb	r3, [r3, #18]
 8000718:	461a      	mov	r2, r3
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SX1278_config+0x1fc>)
 800071c:	5c9b      	ldrb	r3, [r3, r2]
 800071e:	011b      	lsls	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7cdb      	ldrb	r3, [r3, #19]
 8000726:	4619      	mov	r1, r3
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SX1278_config+0x200>)
 800072a:	5c5b      	ldrb	r3, [r3, r1]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000730:	4413      	add	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	211d      	movs	r1, #29
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fea4 	bl	8000486 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7c5b      	ldrb	r3, [r3, #17]
 8000742:	461a      	mov	r2, r3
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <SX1278_config+0x1f8>)
 8000746:	5c9b      	ldrb	r3, [r3, r2]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7d1b      	ldrb	r3, [r3, #20]
 8000750:	4619      	mov	r1, r3
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SX1278_config+0x204>)
 8000754:	5c5b      	ldrb	r3, [r3, r1]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800075a:	4413      	add	r3, r2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	211e      	movs	r1, #30
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fe8f 	bl	8000486 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000768:	2204      	movs	r2, #4
 800076a:	2126      	movs	r1, #38	; 0x26
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe8a 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000772:	2208      	movs	r2, #8
 8000774:	211f      	movs	r1, #31
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fe85 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe80 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000786:	2208      	movs	r2, #8
 8000788:	2121      	movs	r1, #33	; 0x21
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fe7b 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000790:	2201      	movs	r2, #1
 8000792:	2141      	movs	r1, #65	; 0x41
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fe76 	bl	8000486 <SX1278_SPIWrite>
	module->readBytes = 0;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f810 	bl	80007c8 <SX1278_standby>
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	01e84800 	.word	0x01e84800
 80007b4:	08004458 	.word	0x08004458
 80007b8:	0800445c 	.word	0x0800445c
 80007bc:	08004464 	.word	0x08004464
 80007c0:	08004470 	.word	0x08004470
 80007c4:	08004474 	.word	0x08004474

080007c8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007d0:	2209      	movs	r2, #9
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe56 	bl	8000486 <SX1278_SPIWrite>
	module->status = STANDBY;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	759a      	strb	r2, [r3, #22]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007f0:	2208      	movs	r2, #8
 80007f2:	2101      	movs	r1, #1
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fe46 	bl	8000486 <SX1278_SPIWrite>
	module->status = SLEEP;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	759a      	strb	r2, [r3, #22]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000810:	2288      	movs	r2, #136	; 0x88
 8000812:	2101      	movs	r1, #1
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fe36 	bl	8000486 <SX1278_SPIWrite>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	2112      	movs	r1, #18
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe29 	bl	8000486 <SX1278_SPIWrite>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	460b      	mov	r3, r1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	7afa      	ldrb	r2, [r7, #11]
 800084e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff feb5 	bl	80005c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	214d      	movs	r1, #77	; 0x4d
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff fe13 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	2124      	movs	r1, #36	; 0x24
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff fe0e 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff fe09 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000874:	223f      	movs	r2, #63	; 0x3f
 8000876:	2111      	movs	r1, #17
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff fe04 	bl	8000486 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff ffcf 	bl	8000822 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	461a      	mov	r2, r3
 8000888:	2122      	movs	r1, #34	; 0x22
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fdfb 	bl	8000486 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000890:	210f      	movs	r1, #15
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fdd8 	bl	8000448 <SX1278_SPIRead>
 8000898:	4603      	mov	r3, r0
 800089a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	461a      	mov	r2, r3
 80008a0:	210d      	movs	r1, #13
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fdef 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008a8:	228d      	movs	r2, #141	; 0x8d
 80008aa:	2101      	movs	r1, #1
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fdea 	bl	8000486 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ba:	2118      	movs	r1, #24
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fdc3 	bl	8000448 <SX1278_SPIRead>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d104      	bne.n	80008d6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2203      	movs	r2, #3
 80008d0:	759a      	strb	r2, [r3, #22]
			return 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e013      	b.n	80008fe <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f967 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff fe67 	bl	80005c0 <SX1278_config>
			return 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e003      	b.n	80008fe <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f9c9 	bl	8000c8e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008fc:	e7dd      	b.n	80008ba <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f9c6 	bl	8000ca4 <SX1278_hw_GetDIO0>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d030      	beq.n	8000980 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3317      	adds	r3, #23
 8000922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fb43 	bl	8002fb4 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800092e:	2110      	movs	r1, #16
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fd89 	bl	8000448 <SX1278_SPIRead>
 8000936:	4603      	mov	r3, r0
 8000938:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	461a      	mov	r2, r3
 800093e:	210d      	movs	r1, #13
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fda0 	bl	8000486 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7c5b      	ldrb	r3, [r3, #17]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7d5b      	ldrb	r3, [r3, #21]
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e005      	b.n	8000962 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000956:	2113      	movs	r1, #19
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fd75 	bl	8000448 <SX1278_SPIRead>
 800095e:	4603      	mov	r3, r0
 8000960:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f103 0217 	add.w	r2, r3, #23
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2100      	movs	r1, #0
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fdb3 	bl	80004d8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff51 	bl	8000822 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	460b      	mov	r3, r1
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	7afa      	ldrb	r2, [r7, #11]
 80009a0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff fe0c 	bl	80005c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009a8:	2287      	movs	r2, #135	; 0x87
 80009aa:	214d      	movs	r1, #77	; 0x4d
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fd6a 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009b2:	2200      	movs	r2, #0
 80009b4:	2124      	movs	r1, #36	; 0x24
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fd65 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009bc:	2241      	movs	r2, #65	; 0x41
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fd60 	bl	8000486 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff ff2b 	bl	8000822 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009cc:	22f7      	movs	r2, #247	; 0xf7
 80009ce:	2111      	movs	r1, #17
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd58 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	461a      	mov	r2, r3
 80009da:	2122      	movs	r1, #34	; 0x22
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fd52 	bl	8000486 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009e2:	210e      	movs	r1, #14
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fd2f 	bl	8000448 <SX1278_SPIRead>
 80009ea:	4603      	mov	r3, r0
 80009ec:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	461a      	mov	r2, r3
 80009f2:	210d      	movs	r1, #13
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fd46 	bl	8000486 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009fa:	2122      	movs	r1, #34	; 0x22
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fd23 	bl	8000448 <SX1278_SPIRead>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a06:	7dba      	ldrb	r2, [r7, #22]
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d104      	bne.n	8000a18 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2202      	movs	r2, #2
 8000a12:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00e      	b.n	8000a36 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ea      	bne.n	80009fa <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8c6 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fdc6 	bl	80005c0 <SX1278_config>
			return 0;
 8000a34:	2300      	movs	r3, #0
		}
	}
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	2100      	movs	r1, #0
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fd78 	bl	800054a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a5a:	228b      	movs	r2, #139	; 0x8b
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff fd11 	bl	8000486 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f91b 	bl	8000ca4 <SX1278_hw_GetDIO0>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00b      	beq.n	8000a8c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a74:	2112      	movs	r1, #18
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fce6 	bl	8000448 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fed0 	bl	8000822 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff fea0 	bl	80007c8 <SX1278_standby>
			return 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e013      	b.n	8000ab4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f88c 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff fd8c 	bl	80005c0 <SX1278_config>
			return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e003      	b.n	8000ab4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f8ee 	bl	8000c8e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ab2:	e7d7      	b.n	8000a64 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f848 	bl	8000b62 <SX1278_hw_init>
	module->frequency = frequency;
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ad8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	7e3a      	ldrb	r2, [r7, #24]
 8000ae0:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	7f3a      	ldrb	r2, [r7, #28]
 8000ae6:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000aee:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000af6:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000afe:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b06:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fd59 	bl	80005c0 <SX1278_config>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d003      	beq.n	8000b38 <SX1278_read+0x22>
		length = module->readBytes;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b36:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3317      	adds	r3, #23
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f002 fa29 	bl	8002f98 <memcpy>
	rxBuf[length] = '\0';
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SX1278_hw_init>:
#include <string.h>
#include "main.h"
//#include "gpio.h"
//#include "spi.h"

__attribute__((weak)) void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f80d 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6858      	ldr	r0, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 ffdf 	bl	8001b42 <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SX1278_hw_SetNSS>:

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6958      	ldr	r0, [r3, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	bf0c      	ite	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	2300      	movne	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f000 ffc8 	bl	8001b42 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SX1278_hw_Reset>:

__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffe1 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6858      	ldr	r0, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f000 ffb3 	bl	8001b42 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 f856 	bl	8000c8e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6858      	ldr	r0, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f000 ffa7 	bl	8001b42 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f000 f84a 	bl	8000c8e <SX1278_hw_DelayMs>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <SX1278_hw_SPICommand>:

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffbb 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6998      	ldr	r0, [r3, #24]
 8000c1a:	1cf9      	adds	r1, r7, #3
 8000c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c20:	2201      	movs	r2, #1
 8000c22:	f001 fc45 	bl	80024b0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c26:	bf00      	nop
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 ff1d 	bl	8002a6c <HAL_SPI_GetState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d1f7      	bne.n	8000c28 <SX1278_hw_SPICommand+0x26>
		;
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <SX1278_hw_SPIReadByte>:

__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af02      	add	r7, sp, #8
 8000c48:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff99 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6998      	ldr	r0, [r3, #24]
 8000c5e:	f107 020e 	add.w	r2, r7, #14
 8000c62:	f107 010f 	add.w	r1, r7, #15
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f001 fd5b 	bl	8002728 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c72:	bf00      	nop
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fef7 	bl	8002a6c <HAL_SPI_GetState>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d1f7      	bne.n	8000c74 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <SX1278_hw_DelayMs>:

__attribute__((weak)) void SX1278_hw_DelayMs(uint32_t msec) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 fcb0 	bl	80015fc <HAL_Delay>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SX1278_hw_GetDIO0>:

__attribute__((weak)) int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4610      	mov	r0, r2
 8000cba:	f000 ff2b 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cde:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d013      	beq.n	8000d12 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cee:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cf2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfa:	e000      	b.n	8000cfe <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cfc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f9      	beq.n	8000cfc <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d12:	687b      	ldr	r3, [r7, #4]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	2332      	movs	r3, #50	; 0x32
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <_write+0x48>)
 8000d36:	f001 ff9a 	bl	8002c6e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e009      	b.n	8000d54 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ffc2 	bl	8000cd2 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf1      	blt.n	8000d40 <_write+0x20>
	}
	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000f8 	.word	0x200000f8
 8000d6c:	00000000 	.word	0x00000000

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f000 fbdf 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f92b 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 f9c5 	bl	800110c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d82:	f000 f999 	bl	80010b8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000d86:	f000 f961 	bl	800104c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  master = 1;
 8000d8a:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <main+0x1f8>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
  //master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
  if (master == 1) {
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <main+0x1f8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d109      	bne.n	8000dac <main+0x3c>
  		printf("Mode: Master\r\n");
 8000d98:	4874      	ldr	r0, [pc, #464]	; (8000f6c <main+0x1fc>)
 8000d9a:	f002 f999 	bl	80030d0 <puts>
  		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da4:	4872      	ldr	r0, [pc, #456]	; (8000f70 <main+0x200>)
 8000da6:	f000 fecc 	bl	8001b42 <HAL_GPIO_WritePin>
 8000daa:	e008      	b.n	8000dbe <main+0x4e>
  	} else {
  		printf("Mode: Slave\r\n");
 8000dac:	4871      	ldr	r0, [pc, #452]	; (8000f74 <main+0x204>)
 8000dae:	f002 f98f 	bl	80030d0 <puts>
  		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db8:	486d      	ldr	r0, [pc, #436]	; (8000f70 <main+0x200>)
 8000dba:	f000 fec2 	bl	8001b42 <HAL_GPIO_WritePin>
  	}
  //initialize LoRa module

    SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000dbe:	4b6e      	ldr	r3, [pc, #440]	; (8000f78 <main+0x208>)
 8000dc0:	4a6b      	ldr	r2, [pc, #428]	; (8000f70 <main+0x200>)
 8000dc2:	60da      	str	r2, [r3, #12]
    SX1278_hw.dio0.pin = DIO0_Pin;
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <main+0x208>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	609a      	str	r2, [r3, #8]
    SX1278_hw.nss.port = NSS_GPIO_Port;
 8000dca:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <main+0x208>)
 8000dcc:	4a68      	ldr	r2, [pc, #416]	; (8000f70 <main+0x200>)
 8000dce:	615a      	str	r2, [r3, #20]
    SX1278_hw.nss.pin = NSS_Pin;
 8000dd0:	4b69      	ldr	r3, [pc, #420]	; (8000f78 <main+0x208>)
 8000dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd6:	611a      	str	r2, [r3, #16]
    SX1278_hw.reset.port = RESET_GPIO_Port;
 8000dd8:	4b67      	ldr	r3, [pc, #412]	; (8000f78 <main+0x208>)
 8000dda:	4a65      	ldr	r2, [pc, #404]	; (8000f70 <main+0x200>)
 8000ddc:	605a      	str	r2, [r3, #4]
    SX1278_hw.reset.pin = RESET_Pin;
 8000dde:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <main+0x208>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

    SX1278_hw.spi = &hspi2;
 8000de4:	4b64      	ldr	r3, [pc, #400]	; (8000f78 <main+0x208>)
 8000de6:	4a65      	ldr	r2, [pc, #404]	; (8000f7c <main+0x20c>)
 8000de8:	619a      	str	r2, [r3, #24]

    SX1278.hw = &SX1278_hw;
 8000dea:	4b65      	ldr	r3, [pc, #404]	; (8000f80 <main+0x210>)
 8000dec:	4a62      	ldr	r2, [pc, #392]	; (8000f78 <main+0x208>)
 8000dee:	601a      	str	r2, [r3, #0]

    printf("Configuring LoRa module\r\n");
 8000df0:	4864      	ldr	r0, [pc, #400]	; (8000f84 <main+0x214>)
 8000df2:	f002 f96d 	bl	80030d0 <puts>

    SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
 8000df6:	230a      	movs	r3, #10
 8000df8:	9305      	str	r3, [sp, #20]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	2307      	movs	r3, #7
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	a354      	add	r3, pc, #336	; (adr r3, 8000f60 <main+0x1f0>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	485a      	ldr	r0, [pc, #360]	; (8000f80 <main+0x210>)
 8000e16:	f7ff fe51 	bl	8000abc <SX1278_init>

    printf("Done configuring LoRaModule\r\n");
 8000e1a:	485b      	ldr	r0, [pc, #364]	; (8000f88 <main+0x218>)
 8000e1c:	f002 f958 	bl	80030d0 <puts>
    if (master == 1) {
 8000e20:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <main+0x1f8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d10f      	bne.n	8000e48 <main+0xd8>
    		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000e28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4854      	ldr	r0, [pc, #336]	; (8000f80 <main+0x210>)
 8000e30:	f7ff fdad 	bl	800098e <SX1278_LoRaEntryTx>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <main+0x21c>)
 8000e38:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	4853      	ldr	r0, [pc, #332]	; (8000f90 <main+0x220>)
 8000e42:	f000 fe7e 	bl	8001b42 <HAL_GPIO_WritePin>
 8000e46:	e00e      	b.n	8000e66 <main+0xf6>
    	} else {
    		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000e48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	484c      	ldr	r0, [pc, #304]	; (8000f80 <main+0x210>)
 8000e50:	f7ff fcf4 	bl	800083c <SX1278_LoRaEntryRx>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <main+0x21c>)
 8000e58:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e60:	484b      	ldr	r0, [pc, #300]	; (8000f90 <main+0x220>)
 8000e62:	f000 fe6e 	bl	8001b42 <HAL_GPIO_WritePin>
    	}
    printf("Retval:%d\n",ret);
 8000e66:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <main+0x21c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4849      	ldr	r0, [pc, #292]	; (8000f94 <main+0x224>)
 8000e6e:	f002 f8a9 	bl	8002fc4 <iprintf>
    /* Infinite loop */
      /* USER CODE BEGIN WHILE */
      while (1)
      {

    		if (master == 1) {
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <main+0x1f8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d144      	bne.n	8000f04 <main+0x194>
    			printf("Master ...\r\n");
 8000e7a:	4847      	ldr	r0, [pc, #284]	; (8000f98 <main+0x228>)
 8000e7c:	f002 f928 	bl	80030d0 <puts>
    			HAL_Delay(1000);
 8000e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e84:	f000 fbba 	bl	80015fc <HAL_Delay>
    			printf("Sending package...\r\n");
 8000e88:	4844      	ldr	r0, [pc, #272]	; (8000f9c <main+0x22c>)
 8000e8a:	f002 f921 	bl	80030d0 <puts>
    			message_length = sprintf(buffer, "Hello %d", message);
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <main+0x230>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4943      	ldr	r1, [pc, #268]	; (8000fa4 <main+0x234>)
 8000e96:	4844      	ldr	r0, [pc, #272]	; (8000fa8 <main+0x238>)
 8000e98:	f002 f922 	bl	80030e0 <siprintf>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a43      	ldr	r2, [pc, #268]	; (8000fac <main+0x23c>)
 8000ea0:	6013      	str	r3, [r2, #0]
    			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000ea2:	4b42      	ldr	r3, [pc, #264]	; (8000fac <main+0x23c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4834      	ldr	r0, [pc, #208]	; (8000f80 <main+0x210>)
 8000eb0:	f7ff fd6d 	bl	800098e <SX1278_LoRaEntryTx>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a35      	ldr	r2, [pc, #212]	; (8000f8c <main+0x21c>)
 8000eb8:	6013      	str	r3, [r2, #0]
    			printf("Entry: %d\r\n", ret);
 8000eba:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <main+0x21c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483b      	ldr	r0, [pc, #236]	; (8000fb0 <main+0x240>)
 8000ec2:	f002 f87f 	bl	8002fc4 <iprintf>
    			printf("Sending %s\r\n", buffer);
 8000ec6:	4938      	ldr	r1, [pc, #224]	; (8000fa8 <main+0x238>)
 8000ec8:	483a      	ldr	r0, [pc, #232]	; (8000fb4 <main+0x244>)
 8000eca:	f002 f87b 	bl	8002fc4 <iprintf>
    			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <main+0x23c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ed8:	4933      	ldr	r1, [pc, #204]	; (8000fa8 <main+0x238>)
 8000eda:	4829      	ldr	r0, [pc, #164]	; (8000f80 <main+0x210>)
 8000edc:	f7ff fdaf 	bl	8000a3e <SX1278_LoRaTxPacket>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a2a      	ldr	r2, [pc, #168]	; (8000f8c <main+0x21c>)
 8000ee4:	6013      	str	r3, [r2, #0]
    					message_length, 2000);
    			message += 1;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <main+0x230>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <main+0x230>)
 8000eee:	6013      	str	r3, [r2, #0]
    			printf("Transmission: %d\r\n", ret);
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <main+0x21c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4830      	ldr	r0, [pc, #192]	; (8000fb8 <main+0x248>)
 8000ef8:	f002 f864 	bl	8002fc4 <iprintf>
    			printf("Package sent...\r\n");
 8000efc:	482f      	ldr	r0, [pc, #188]	; (8000fbc <main+0x24c>)
 8000efe:	f002 f8e7 	bl	80030d0 <puts>
 8000f02:	e7b6      	b.n	8000e72 <main+0x102>
    		} else {
    			printf("Slave ...\r\n");
 8000f04:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <main+0x250>)
 8000f06:	f002 f8e3 	bl	80030d0 <puts>
    			HAL_Delay(800);
 8000f0a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f0e:	f000 fb75 	bl	80015fc <HAL_Delay>
    			printf("Receiving package...\r\n");
 8000f12:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <main+0x254>)
 8000f14:	f002 f8dc 	bl	80030d0 <puts>
    			ret = SX1278_LoRaRxPacket(&SX1278);
 8000f18:	4819      	ldr	r0, [pc, #100]	; (8000f80 <main+0x210>)
 8000f1a:	f7ff fcf4 	bl	8000906 <SX1278_LoRaRxPacket>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <main+0x21c>)
 8000f24:	601a      	str	r2, [r3, #0]
    			printf("Received: %d\r\n", ret);
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <main+0x21c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <main+0x258>)
 8000f2e:	f002 f849 	bl	8002fc4 <iprintf>
    			if (ret > 0) {
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <main+0x21c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	dd0e      	ble.n	8000f58 <main+0x1e8>
    				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <main+0x21c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	4919      	ldr	r1, [pc, #100]	; (8000fa8 <main+0x238>)
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <main+0x210>)
 8000f46:	f7ff fde6 	bl	8000b16 <SX1278_read>
    				printf("Content (%d): %s\r\n", ret, buffer);
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <main+0x21c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <main+0x238>)
 8000f50:	4619      	mov	r1, r3
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <main+0x25c>)
 8000f54:	f002 f836 	bl	8002fc4 <iprintf>
    			}
    			printf("Package received ...\r\n");
 8000f58:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <main+0x260>)
 8000f5a:	f002 f8b9 	bl	80030d0 <puts>
    		if (master == 1) {
 8000f5e:	e788      	b.n	8000e72 <main+0x102>
 8000f60:	19cf0e40 	.word	0x19cf0e40
 8000f64:	00000000 	.word	0x00000000
 8000f68:	20000478 	.word	0x20000478
 8000f6c:	08004310 	.word	0x08004310
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	08004320 	.word	0x08004320
 8000f78:	2000045c 	.word	0x2000045c
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	20000340 	.word	0x20000340
 8000f84:	08004330 	.word	0x08004330
 8000f88:	0800434c 	.word	0x0800434c
 8000f8c:	20000458 	.word	0x20000458
 8000f90:	40011000 	.word	0x40011000
 8000f94:	0800436c 	.word	0x0800436c
 8000f98:	08004378 	.word	0x08004378
 8000f9c:	08004384 	.word	0x08004384
 8000fa0:	200000f4 	.word	0x200000f4
 8000fa4:	08004398 	.word	0x08004398
 8000fa8:	2000013c 	.word	0x2000013c
 8000fac:	200000f0 	.word	0x200000f0
 8000fb0:	080043a4 	.word	0x080043a4
 8000fb4:	080043b0 	.word	0x080043b0
 8000fb8:	080043c0 	.word	0x080043c0
 8000fbc:	080043d4 	.word	0x080043d4
 8000fc0:	080043e8 	.word	0x080043e8
 8000fc4:	080043f4 	.word	0x080043f4
 8000fc8:	0800440c 	.word	0x0800440c
 8000fcc:	0800441c 	.word	0x0800441c
 8000fd0:	08004430 	.word	0x08004430

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b090      	sub	sp, #64	; 0x40
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	2228      	movs	r2, #40	; 0x28
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 ffe6 	bl	8002fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffe:	2310      	movs	r3, #16
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fdb2 	bl	8001b74 <HAL_RCC_OscConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001016:	f000 f8e9 	bl	80011ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101a:	230f      	movs	r3, #15
 800101c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f81e 	bl	8002074 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800103e:	f000 f8d5 	bl	80011ec <Error_Handler>
  }
}
 8001042:	bf00      	nop
 8001044:	3740      	adds	r7, #64	; 0x40
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800105c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_SPI2_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_SPI2_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_SPI2_Init+0x64>)
 8001098:	220a      	movs	r2, #10
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_SPI2_Init+0x64>)
 800109e:	f001 f983 	bl	80023a8 <HAL_SPI_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010a8:	f000 f8a0 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000098 	.word	0x20000098
 80010b4:	40003800 	.word	0x40003800

080010b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_USART1_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f001 fd70 	bl	8002bd4 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 f877 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000f8 	.word	0x200000f8
 8001108:	40013800 	.word	0x40013800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <MX_GPIO_Init+0xd4>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <MX_GPIO_Init+0xd4>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <MX_GPIO_Init+0xd4>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_GPIO_Init+0xd4>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	481d      	ldr	r0, [pc, #116]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001170:	f000 fce7 	bl	8001b42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|NSS_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f241 0101 	movw	r1, #4097	; 0x1001
 800117a:	481b      	ldr	r0, [pc, #108]	; (80011e8 <MX_GPIO_Init+0xdc>)
 800117c:	f000 fce1 	bl	8001b42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2302      	movs	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4812      	ldr	r0, [pc, #72]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800119a:	f000 fb37 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin;
 800119e:	f241 0301 	movw	r3, #4097	; 0x1001
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_GPIO_Init+0xdc>)
 80011b8:	f000 fb28 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin MODE_Pin PB11 */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin|GPIO_PIN_11;
 80011bc:	f640 4302 	movw	r3, #3074	; 0xc02
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_GPIO_Init+0xdc>)
 80011d2:	f000 fb1b 	bl	800180c <HAL_GPIO_Init>

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40010c00 	.word	0x40010c00

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_MspInit+0x5c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_MspInit+0x5c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x5c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x5c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_MspInit+0x60>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_MspInit+0x60>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000

0800125c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_SPI_MspInit+0x8c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d131      	bne.n	80012e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_SPI_MspInit+0x90>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_SPI_MspInit+0x90>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_SPI_MspInit+0x90>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_SPI_MspInit+0x90>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_SPI_MspInit+0x90>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_SPI_MspInit+0x90>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <HAL_SPI_MspInit+0x94>)
 80012c2:	f000 faa3 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_SPI_MspInit+0x94>)
 80012dc:	f000 fa96 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40003800 	.word	0x40003800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010c00 	.word	0x40010c00

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_UART_MspInit+0x8c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d131      	bne.n	8001378 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_UART_MspInit+0x90>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0x90>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_UART_MspInit+0x90>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_UART_MspInit+0x90>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <HAL_UART_MspInit+0x94>)
 800135a:	f000 fa57 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_UART_MspInit+0x94>)
 8001374:	f000 fa4a 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40013800 	.word	0x40013800
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d2:	f000 f8f7 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}

080013da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e00a      	b.n	8001402 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ec:	f3af 8000 	nop.w
 80013f0:	4601      	mov	r1, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf0      	blt.n	80013ec <_read+0x12>
	}

return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143a:	605a      	str	r2, [r3, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <_isatty>:

int _isatty(int file)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f001 fd4e 	bl	8002f44 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20005000 	.word	0x20005000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	2000008c 	.word	0x2000008c
 80014dc:	20000490 	.word	0x20000490

080014e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001512:	f7ff ffe5 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f001 fd1b 	bl	8002f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151a:	f7ff fc29 	bl	8000d70 <main>
  bx lr
 800151e:	4770      	bx	lr
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001528:	08004538 	.word	0x08004538
  ldr r2, =_sbss
 800152c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001530:	20000490 	.word	0x20000490

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x28>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x28>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f92b 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fe50 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40022000 	.word	0x40022000

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f935 	bl	80017f2 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a0:	f000 f90b 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x1c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_IncTick+0x20>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_IncTick+0x20>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000008 	.word	0x20000008
 80015e4:	2000047c 	.word	0x2000047c

080015e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <HAL_GetTick+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	2000047c 	.word	0x2000047c

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fff0 	bl	80015e8 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffe0 	bl	80015e8 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008

08001644 <__NVIC_SetPriorityGrouping>:
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_SetPriority>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <SysTick_Config>:
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	f7ff ff90 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff49 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff5e 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff90 	bl	80016fc <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5f 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffb0 	bl	8001760 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e169      	b.n	8001af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001820:	2201      	movs	r2, #1
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8158 	bne.w	8001aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a9a      	ldr	r2, [pc, #616]	; (8001aac <HAL_GPIO_Init+0x2a0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d05e      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001848:	4a98      	ldr	r2, [pc, #608]	; (8001aac <HAL_GPIO_Init+0x2a0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d875      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800184e:	4a98      	ldr	r2, [pc, #608]	; (8001ab0 <HAL_GPIO_Init+0x2a4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d058      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001854:	4a96      	ldr	r2, [pc, #600]	; (8001ab0 <HAL_GPIO_Init+0x2a4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d86f      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800185a:	4a96      	ldr	r2, [pc, #600]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d052      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001860:	4a94      	ldr	r2, [pc, #592]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d869      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001866:	4a94      	ldr	r2, [pc, #592]	; (8001ab8 <HAL_GPIO_Init+0x2ac>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d04c      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 800186c:	4a92      	ldr	r2, [pc, #584]	; (8001ab8 <HAL_GPIO_Init+0x2ac>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d863      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001872:	4a92      	ldr	r2, [pc, #584]	; (8001abc <HAL_GPIO_Init+0x2b0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d046      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001878:	4a90      	ldr	r2, [pc, #576]	; (8001abc <HAL_GPIO_Init+0x2b0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d85d      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d82a      	bhi.n	80018d8 <HAL_GPIO_Init+0xcc>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d859      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <HAL_GPIO_Init+0x80>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	08001907 	.word	0x08001907
 8001890:	080018e1 	.word	0x080018e1
 8001894:	080018f3 	.word	0x080018f3
 8001898:	08001935 	.word	0x08001935
 800189c:	0800193b 	.word	0x0800193b
 80018a0:	0800193b 	.word	0x0800193b
 80018a4:	0800193b 	.word	0x0800193b
 80018a8:	0800193b 	.word	0x0800193b
 80018ac:	0800193b 	.word	0x0800193b
 80018b0:	0800193b 	.word	0x0800193b
 80018b4:	0800193b 	.word	0x0800193b
 80018b8:	0800193b 	.word	0x0800193b
 80018bc:	0800193b 	.word	0x0800193b
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	0800193b 	.word	0x0800193b
 80018c8:	0800193b 	.word	0x0800193b
 80018cc:	0800193b 	.word	0x0800193b
 80018d0:	080018e9 	.word	0x080018e9
 80018d4:	080018fd 	.word	0x080018fd
 80018d8:	4a79      	ldr	r2, [pc, #484]	; (8001ac0 <HAL_GPIO_Init+0x2b4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018de:	e02c      	b.n	800193a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e029      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	3304      	adds	r3, #4
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e024      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	3308      	adds	r3, #8
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e01f      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	330c      	adds	r3, #12
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e01a      	b.n	800193c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190e:	2304      	movs	r3, #4
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e013      	b.n	800193c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	611a      	str	r2, [r3, #16]
          break;
 8001926:	e009      	b.n	800193c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	615a      	str	r2, [r3, #20]
          break;
 8001932:	e003      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x130>
          break;
 800193a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d801      	bhi.n	8001946 <HAL_GPIO_Init+0x13a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	e001      	b.n	800194a <HAL_GPIO_Init+0x13e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d802      	bhi.n	8001958 <HAL_GPIO_Init+0x14c>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x152>
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3b08      	subs	r3, #8
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	210f      	movs	r1, #15
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80b1 	beq.w	8001aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800198c:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <HAL_GPIO_Init+0x2b8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x2b8>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_GPIO_Init+0x2b8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2bc>)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a40      	ldr	r2, [pc, #256]	; (8001acc <HAL_GPIO_Init+0x2c0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_GPIO_Init+0x1ec>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3f      	ldr	r2, [pc, #252]	; (8001ad0 <HAL_GPIO_Init+0x2c4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1e8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1e4>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <HAL_GPIO_Init+0x2cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1e0>
 80019e8:	2303      	movs	r3, #3
 80019ea:	e006      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019ec:	2304      	movs	r3, #4
 80019ee:	e004      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f8:	2300      	movs	r3, #0
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	f002 0203 	and.w	r2, r2, #3
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	4093      	lsls	r3, r2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0a:	492f      	ldr	r1, [pc, #188]	; (8001ac8 <HAL_GPIO_Init+0x2bc>)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	492c      	ldr	r1, [pc, #176]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4928      	ldr	r1, [pc, #160]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4922      	ldr	r1, [pc, #136]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	491e      	ldr	r1, [pc, #120]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4918      	ldr	r1, [pc, #96]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4914      	ldr	r1, [pc, #80]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d021      	beq.n	8001ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e021      	b.n	8001aee <HAL_GPIO_Init+0x2e2>
 8001aaa:	bf00      	nop
 8001aac:	10320000 	.word	0x10320000
 8001ab0:	10310000 	.word	0x10310000
 8001ab4:	10220000 	.word	0x10220000
 8001ab8:	10210000 	.word	0x10210000
 8001abc:	10120000 	.word	0x10120000
 8001ac0:	10110000 	.word	0x10110000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	40010c00 	.word	0x40010c00
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	40011400 	.word	0x40011400
 8001adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4909      	ldr	r1, [pc, #36]	; (8001b10 <HAL_GPIO_Init+0x304>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f47f ae8e 	bne.w	8001820 <HAL_GPIO_Init+0x14>
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	372c      	adds	r7, #44	; 0x2c
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e001      	b.n	8001b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b52:	787b      	ldrb	r3, [r7, #1]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b58:	887a      	ldrh	r2, [r7, #2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b5e:	e003      	b.n	8001b68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	041a      	lsls	r2, r3, #16
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e26c      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8087 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00c      	beq.n	8001bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d168      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e246      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x76>
 8001bdc:	4b80      	ldr	r3, [pc, #512]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b78      	ldr	r3, [pc, #480]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0xbc>
 8001c16:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c30:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a67      	ldr	r2, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fcca 	bl	80015e8 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fcc6 	bl	80015e8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1fa      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe4>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcb6 	bl	80015e8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcb2 	bl	80015e8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1e6      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x10c>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
 8001cc6:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1ba      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4939      	ldr	r1, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fc6b 	bl	80015e8 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fc67 	bl	80015e8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e19b      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc4a 	bl	80015e8 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc46 	bl	80015e8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e17a      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03a      	beq.n	8001df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fc2a 	bl	80015e8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc26 	bl	80015e8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e15a      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 fad8 	bl	800236c <RCC_Delay>
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fc10 	bl	80015e8 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc0c 	bl	80015e8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e140      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	42420000 	.word	0x42420000
 8001de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b9e      	ldr	r3, [pc, #632]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e9      	bne.n	8001dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a6 	beq.w	8001f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b97      	ldr	r3, [pc, #604]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a93      	ldr	r2, [pc, #588]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a8a      	ldr	r2, [pc, #552]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fbcd 	bl	80015e8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fbc9 	bl	80015e8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0fd      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x312>
 8001e78:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a72      	ldr	r2, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x356>
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a6c      	ldr	r2, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb7d 	bl	80015e8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fb79 	bl	80015e8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0ab      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ee      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fb67 	bl	80015e8 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fb63 	bl	80015e8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e095      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a47      	ldr	r2, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8081 	beq.w	800205e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d061      	beq.n	800202c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d146      	bne.n	8001ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fb37 	bl	80015e8 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fb33 	bl	80015e8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e067      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	492d      	ldr	r1, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a19      	ldr	r1, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb07 	bl	80015e8 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fb03 	bl	80015e8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e037      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x46a>
 8001ffc:	e02f      	b.n	800205e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff faf0 	bl	80015e8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff faec 	bl	80015e8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e020      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x498>
 800202a:	e018      	b.n	800205e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	42420060 	.word	0x42420060

08002074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0d0      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d910      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4965      	ldr	r1, [pc, #404]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d040      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e073      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4936      	ldr	r1, [pc, #216]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff fa40 	bl	80015e8 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff fa3c 	bl	80015e8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e053      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d210      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0207 	bic.w	r2, r3, #7
 80021aa:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f821 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002206:	4602      	mov	r2, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	490a      	ldr	r1, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1cc>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f99e 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40022000 	.word	0x40022000
 8002238:	40021000 	.word	0x40021000
 800223c:	08004478 	.word	0x08004478
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b490      	push	{r4, r7}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002250:	1d3c      	adds	r4, r7, #4
 8002252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002258:	f240 2301 	movw	r3, #513	; 0x201
 800225c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x40>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x46>
 8002286:	e02d      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	e02d      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800229a:	4413      	add	r3, r2
 800229c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ba:	4413      	add	r3, r2
 80022bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c6:	fb02 f203 	mul.w	r2, r2, r3
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	e004      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	623b      	str	r3, [r7, #32]
      break;
 80022e2:	e002      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc90      	pop	{r4, r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	08004448 	.word	0x08004448
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200
 8002304:	003d0900 	.word	0x003d0900

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_RCC_GetHCLKFreq+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002320:	f7ff fff2 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08004488 	.word	0x08004488

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002348:	f7ff ffde 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0adb      	lsrs	r3, r3, #11
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08004488 	.word	0x08004488

0800236c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <RCC_Delay+0x34>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <RCC_Delay+0x38>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0a5b      	lsrs	r3, r3, #9
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002388:	bf00      	nop
  }
  while (Delay --);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	60fa      	str	r2, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <RCC_Delay+0x1c>
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000000 	.word	0x20000000
 80023a4:	10624dd3 	.word	0x10624dd3

080023a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e076      	b.n	80024a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ca:	d009      	beq.n	80023e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
 80023d2:	e005      	b.n	80023e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe ff2e 	bl	800125c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	0c1a      	lsrs	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f002 0204 	and.w	r2, r2, #4
 8002486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_Transmit+0x22>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e126      	b.n	8002720 <HAL_SPI_Transmit+0x270>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024da:	f7ff f885 	bl	80015e8 <HAL_GetTick>
 80024de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d002      	beq.n	80024f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f4:	e10b      	b.n	800270e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_SPI_Transmit+0x52>
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002506:	e102      	b.n	800270e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2203      	movs	r2, #3
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d10f      	bne.n	8002570 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d007      	beq.n	800258e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002596:	d14b      	bne.n	8002630 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_SPI_Transmit+0xf6>
 80025a0:	8afb      	ldrh	r3, [r7, #22]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d13e      	bne.n	8002624 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025ca:	e02b      	b.n	8002624 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d112      	bne.n	8002600 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	1c9a      	adds	r2, r3, #2
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80025fe:	e011      	b.n	8002624 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002600:	f7fe fff2 	bl	80015e8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d803      	bhi.n	8002618 <HAL_SPI_Transmit+0x168>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002616:	d102      	bne.n	800261e <HAL_SPI_Transmit+0x16e>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002622:	e074      	b.n	800270e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ce      	bne.n	80025cc <HAL_SPI_Transmit+0x11c>
 800262e:	e04c      	b.n	80026ca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_SPI_Transmit+0x18e>
 8002638:	8afb      	ldrh	r3, [r7, #22]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d140      	bne.n	80026c0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002664:	e02c      	b.n	80026c0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d113      	bne.n	800269c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	86da      	strh	r2, [r3, #54]	; 0x36
 800269a:	e011      	b.n	80026c0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269c:	f7fe ffa4 	bl	80015e8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d803      	bhi.n	80026b4 <HAL_SPI_Transmit+0x204>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b2:	d102      	bne.n	80026ba <HAL_SPI_Transmit+0x20a>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026be:	e026      	b.n	800270e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1cd      	bne.n	8002666 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fa62 	bl	8002b98 <SPI_EndRxTxTransaction>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	77fb      	strb	r3, [r7, #31]
 800270a:	e000      	b.n	800270e <HAL_SPI_Transmit+0x25e>
  }

error:
 800270c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800271e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002736:	2301      	movs	r3, #1
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_SPI_TransmitReceive+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e18a      	b.n	8002a64 <HAL_SPI_TransmitReceive+0x33c>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002756:	f7fe ff47 	bl	80015e8 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002774:	2b01      	cmp	r3, #1
 8002776:	d00f      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x70>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277e:	d107      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x68>
 8002788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800278c:	2b04      	cmp	r3, #4
 800278e:	d003      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002796:	e15b      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_SPI_TransmitReceive+0x82>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_TransmitReceive+0x82>
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027b0:	e14e      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d003      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2205      	movs	r2, #5
 80027c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	887a      	ldrh	r2, [r7, #2]
 80027ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d007      	beq.n	800281a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002822:	d178      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x10a>
 800282c:	8b7b      	ldrh	r3, [r7, #26]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d166      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002856:	e053      	b.n	8002900 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d11b      	bne.n	800289e <HAL_SPI_TransmitReceive+0x176>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d016      	beq.n	800289e <HAL_SPI_TransmitReceive+0x176>
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d113      	bne.n	800289e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	1c9a      	adds	r2, r3, #2
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d119      	bne.n	80028e0 <HAL_SPI_TransmitReceive+0x1b8>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	b292      	uxth	r2, r2
 80028c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028e0:	f7fe fe82 	bl	80015e8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d807      	bhi.n	8002900 <HAL_SPI_TransmitReceive+0x1d8>
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f6:	d003      	beq.n	8002900 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028fe:	e0a7      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1a6      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x130>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1a1      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x130>
 8002914:	e07c      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x1fc>
 800291e:	8b7b      	ldrh	r3, [r7, #26]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d16b      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294a:	e057      	b.n	80029fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d11c      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x26c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d017      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x26c>
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d114      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d119      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x2ae>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d014      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029d2:	2301      	movs	r3, #1
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029d6:	f7fe fe07 	bl	80015e8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d803      	bhi.n	80029ee <HAL_SPI_TransmitReceive+0x2c6>
 80029e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ec:	d102      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x2cc>
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029fa:	e029      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1a2      	bne.n	800294c <HAL_SPI_TransmitReceive+0x224>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d19d      	bne.n	800294c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f8bf 	bl	8002b98 <SPI_EndRxTxTransaction>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a2c:	e010      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	e000      	b.n	8002a50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3730      	adds	r7, #48	; 0x30
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a7a:	b2db      	uxtb	r3, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
	...

08002a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a98:	f7fe fda6 	bl	80015e8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aa8:	f7fe fd9e 	bl	80015e8 <HAL_GetTick>
 8002aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	015b      	lsls	r3, r3, #5
 8002ab4:	0d1b      	lsrs	r3, r3, #20
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002abe:	e054      	b.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac6:	d050      	beq.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ac8:	f7fe fd8e 	bl	80015e8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d902      	bls.n	8002ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d13d      	bne.n	8002b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002af6:	d111      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b00:	d004      	beq.n	8002b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d107      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b24:	d10f      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e017      	b.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d19b      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff ff6a 	bl	8002a88 <SPI_WaitFlagStateUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e000      	b.n	8002bcc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e03f      	b.n	8002c66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fb7a 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f905 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	; 0x28
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d17c      	bne.n	8002d88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_UART_Transmit+0x2c>
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e075      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Transmit+0x3e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e06e      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fc91 	bl	80015e8 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_UART_Transmit+0x82>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e003      	b.n	8002cf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d00:	e02a      	b.n	8002d58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f840 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e036      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3302      	adds	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e007      	b.n	8002d4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3301      	adds	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cf      	bne.n	8002d02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f810 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da2:	e02c      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002daa:	d028      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002db2:	f7fe fc19 	bl	80015e8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d21d      	bcs.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dd0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e00f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d0c3      	beq.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e62:	f023 030c 	bic.w	r3, r3, #12
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2c      	ldr	r2, [pc, #176]	; (8002f3c <UART_SetConfig+0x114>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e90:	f7ff fa58 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	e002      	b.n	8002e9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e98:	f7ff fa40 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009a      	lsls	r2, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <UART_SetConfig+0x118>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	0119      	lsls	r1, r3, #4
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009a      	lsls	r2, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <UART_SetConfig+0x118>)
 8002ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2064      	movs	r0, #100	; 0x64
 8002ede:	fb00 f303 	mul.w	r3, r0, r3
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <UART_SetConfig+0x118>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef4:	4419      	add	r1, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <UART_SetConfig+0x118>)
 8002f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2064      	movs	r0, #100	; 0x64
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	3332      	adds	r3, #50	; 0x32
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <UART_SetConfig+0x118>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	f003 020f 	and.w	r2, r3, #15
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	440a      	add	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40013800 	.word	0x40013800
 8002f40:	51eb851f 	.word	0x51eb851f

08002f44 <__errno>:
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <__errno+0x8>)
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c

08002f50 <__libc_init_array>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2600      	movs	r6, #0
 8002f54:	4d0c      	ldr	r5, [pc, #48]	; (8002f88 <__libc_init_array+0x38>)
 8002f56:	4c0d      	ldr	r4, [pc, #52]	; (8002f8c <__libc_init_array+0x3c>)
 8002f58:	1b64      	subs	r4, r4, r5
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	42a6      	cmp	r6, r4
 8002f5e:	d109      	bne.n	8002f74 <__libc_init_array+0x24>
 8002f60:	f001 f9ca 	bl	80042f8 <_init>
 8002f64:	2600      	movs	r6, #0
 8002f66:	4d0a      	ldr	r5, [pc, #40]	; (8002f90 <__libc_init_array+0x40>)
 8002f68:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <__libc_init_array+0x44>)
 8002f6a:	1b64      	subs	r4, r4, r5
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	42a6      	cmp	r6, r4
 8002f70:	d105      	bne.n	8002f7e <__libc_init_array+0x2e>
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f78:	4798      	blx	r3
 8002f7a:	3601      	adds	r6, #1
 8002f7c:	e7ee      	b.n	8002f5c <__libc_init_array+0xc>
 8002f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f82:	4798      	blx	r3
 8002f84:	3601      	adds	r6, #1
 8002f86:	e7f2      	b.n	8002f6e <__libc_init_array+0x1e>
 8002f88:	08004530 	.word	0x08004530
 8002f8c:	08004530 	.word	0x08004530
 8002f90:	08004530 	.word	0x08004530
 8002f94:	08004534 	.word	0x08004534

08002f98 <memcpy>:
 8002f98:	440a      	add	r2, r1
 8002f9a:	4291      	cmp	r1, r2
 8002f9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002fa0:	d100      	bne.n	8002fa4 <memcpy+0xc>
 8002fa2:	4770      	bx	lr
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002faa:	4291      	cmp	r1, r2
 8002fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fb0:	d1f9      	bne.n	8002fa6 <memcpy+0xe>
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <memset>:
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4402      	add	r2, r0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d100      	bne.n	8002fbe <memset+0xa>
 8002fbc:	4770      	bx	lr
 8002fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc2:	e7f9      	b.n	8002fb8 <memset+0x4>

08002fc4 <iprintf>:
 8002fc4:	b40f      	push	{r0, r1, r2, r3}
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <iprintf+0x2c>)
 8002fc8:	b513      	push	{r0, r1, r4, lr}
 8002fca:	681c      	ldr	r4, [r3, #0]
 8002fcc:	b124      	cbz	r4, 8002fd8 <iprintf+0x14>
 8002fce:	69a3      	ldr	r3, [r4, #24]
 8002fd0:	b913      	cbnz	r3, 8002fd8 <iprintf+0x14>
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f000 fa7e 	bl	80034d4 <__sinit>
 8002fd8:	ab05      	add	r3, sp, #20
 8002fda:	4620      	mov	r0, r4
 8002fdc:	9a04      	ldr	r2, [sp, #16]
 8002fde:	68a1      	ldr	r1, [r4, #8]
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	f000 fda5 	bl	8003b30 <_vfiprintf_r>
 8002fe6:	b002      	add	sp, #8
 8002fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fec:	b004      	add	sp, #16
 8002fee:	4770      	bx	lr
 8002ff0:	2000000c 	.word	0x2000000c

08002ff4 <_puts_r>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	460e      	mov	r6, r1
 8002ff8:	4605      	mov	r5, r0
 8002ffa:	b118      	cbz	r0, 8003004 <_puts_r+0x10>
 8002ffc:	6983      	ldr	r3, [r0, #24]
 8002ffe:	b90b      	cbnz	r3, 8003004 <_puts_r+0x10>
 8003000:	f000 fa68 	bl	80034d4 <__sinit>
 8003004:	69ab      	ldr	r3, [r5, #24]
 8003006:	68ac      	ldr	r4, [r5, #8]
 8003008:	b913      	cbnz	r3, 8003010 <_puts_r+0x1c>
 800300a:	4628      	mov	r0, r5
 800300c:	f000 fa62 	bl	80034d4 <__sinit>
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <_puts_r+0xd0>)
 8003012:	429c      	cmp	r4, r3
 8003014:	d120      	bne.n	8003058 <_puts_r+0x64>
 8003016:	686c      	ldr	r4, [r5, #4]
 8003018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800301a:	07db      	lsls	r3, r3, #31
 800301c:	d405      	bmi.n	800302a <_puts_r+0x36>
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	0598      	lsls	r0, r3, #22
 8003022:	d402      	bmi.n	800302a <_puts_r+0x36>
 8003024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003026:	f000 faf3 	bl	8003610 <__retarget_lock_acquire_recursive>
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	0719      	lsls	r1, r3, #28
 800302e:	d51d      	bpl.n	800306c <_puts_r+0x78>
 8003030:	6923      	ldr	r3, [r4, #16]
 8003032:	b1db      	cbz	r3, 800306c <_puts_r+0x78>
 8003034:	3e01      	subs	r6, #1
 8003036:	68a3      	ldr	r3, [r4, #8]
 8003038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800303c:	3b01      	subs	r3, #1
 800303e:	60a3      	str	r3, [r4, #8]
 8003040:	bb39      	cbnz	r1, 8003092 <_puts_r+0x9e>
 8003042:	2b00      	cmp	r3, #0
 8003044:	da38      	bge.n	80030b8 <_puts_r+0xc4>
 8003046:	4622      	mov	r2, r4
 8003048:	210a      	movs	r1, #10
 800304a:	4628      	mov	r0, r5
 800304c:	f000 f868 	bl	8003120 <__swbuf_r>
 8003050:	3001      	adds	r0, #1
 8003052:	d011      	beq.n	8003078 <_puts_r+0x84>
 8003054:	250a      	movs	r5, #10
 8003056:	e011      	b.n	800307c <_puts_r+0x88>
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <_puts_r+0xd4>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d101      	bne.n	8003062 <_puts_r+0x6e>
 800305e:	68ac      	ldr	r4, [r5, #8]
 8003060:	e7da      	b.n	8003018 <_puts_r+0x24>
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <_puts_r+0xd8>)
 8003064:	429c      	cmp	r4, r3
 8003066:	bf08      	it	eq
 8003068:	68ec      	ldreq	r4, [r5, #12]
 800306a:	e7d5      	b.n	8003018 <_puts_r+0x24>
 800306c:	4621      	mov	r1, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f000 f8a8 	bl	80031c4 <__swsetup_r>
 8003074:	2800      	cmp	r0, #0
 8003076:	d0dd      	beq.n	8003034 <_puts_r+0x40>
 8003078:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800307c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800307e:	07da      	lsls	r2, r3, #31
 8003080:	d405      	bmi.n	800308e <_puts_r+0x9a>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	059b      	lsls	r3, r3, #22
 8003086:	d402      	bmi.n	800308e <_puts_r+0x9a>
 8003088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800308a:	f000 fac2 	bl	8003612 <__retarget_lock_release_recursive>
 800308e:	4628      	mov	r0, r5
 8003090:	bd70      	pop	{r4, r5, r6, pc}
 8003092:	2b00      	cmp	r3, #0
 8003094:	da04      	bge.n	80030a0 <_puts_r+0xac>
 8003096:	69a2      	ldr	r2, [r4, #24]
 8003098:	429a      	cmp	r2, r3
 800309a:	dc06      	bgt.n	80030aa <_puts_r+0xb6>
 800309c:	290a      	cmp	r1, #10
 800309e:	d004      	beq.n	80030aa <_puts_r+0xb6>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	6022      	str	r2, [r4, #0]
 80030a6:	7019      	strb	r1, [r3, #0]
 80030a8:	e7c5      	b.n	8003036 <_puts_r+0x42>
 80030aa:	4622      	mov	r2, r4
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 f837 	bl	8003120 <__swbuf_r>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d1bf      	bne.n	8003036 <_puts_r+0x42>
 80030b6:	e7df      	b.n	8003078 <_puts_r+0x84>
 80030b8:	250a      	movs	r5, #10
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	6022      	str	r2, [r4, #0]
 80030c0:	701d      	strb	r5, [r3, #0]
 80030c2:	e7db      	b.n	800307c <_puts_r+0x88>
 80030c4:	080044b4 	.word	0x080044b4
 80030c8:	080044d4 	.word	0x080044d4
 80030cc:	08004494 	.word	0x08004494

080030d0 <puts>:
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <puts+0xc>)
 80030d2:	4601      	mov	r1, r0
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	f7ff bf8d 	b.w	8002ff4 <_puts_r>
 80030da:	bf00      	nop
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <siprintf>:
 80030e0:	b40e      	push	{r1, r2, r3}
 80030e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030e6:	b500      	push	{lr}
 80030e8:	b09c      	sub	sp, #112	; 0x70
 80030ea:	ab1d      	add	r3, sp, #116	; 0x74
 80030ec:	9002      	str	r0, [sp, #8]
 80030ee:	9006      	str	r0, [sp, #24]
 80030f0:	9107      	str	r1, [sp, #28]
 80030f2:	9104      	str	r1, [sp, #16]
 80030f4:	4808      	ldr	r0, [pc, #32]	; (8003118 <siprintf+0x38>)
 80030f6:	4909      	ldr	r1, [pc, #36]	; (800311c <siprintf+0x3c>)
 80030f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030fc:	9105      	str	r1, [sp, #20]
 80030fe:	6800      	ldr	r0, [r0, #0]
 8003100:	a902      	add	r1, sp, #8
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	f000 fbec 	bl	80038e0 <_svfiprintf_r>
 8003108:	2200      	movs	r2, #0
 800310a:	9b02      	ldr	r3, [sp, #8]
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	b01c      	add	sp, #112	; 0x70
 8003110:	f85d eb04 	ldr.w	lr, [sp], #4
 8003114:	b003      	add	sp, #12
 8003116:	4770      	bx	lr
 8003118:	2000000c 	.word	0x2000000c
 800311c:	ffff0208 	.word	0xffff0208

08003120 <__swbuf_r>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	460e      	mov	r6, r1
 8003124:	4614      	mov	r4, r2
 8003126:	4605      	mov	r5, r0
 8003128:	b118      	cbz	r0, 8003132 <__swbuf_r+0x12>
 800312a:	6983      	ldr	r3, [r0, #24]
 800312c:	b90b      	cbnz	r3, 8003132 <__swbuf_r+0x12>
 800312e:	f000 f9d1 	bl	80034d4 <__sinit>
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <__swbuf_r+0x98>)
 8003134:	429c      	cmp	r4, r3
 8003136:	d12b      	bne.n	8003190 <__swbuf_r+0x70>
 8003138:	686c      	ldr	r4, [r5, #4]
 800313a:	69a3      	ldr	r3, [r4, #24]
 800313c:	60a3      	str	r3, [r4, #8]
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	071a      	lsls	r2, r3, #28
 8003142:	d52f      	bpl.n	80031a4 <__swbuf_r+0x84>
 8003144:	6923      	ldr	r3, [r4, #16]
 8003146:	b36b      	cbz	r3, 80031a4 <__swbuf_r+0x84>
 8003148:	6923      	ldr	r3, [r4, #16]
 800314a:	6820      	ldr	r0, [r4, #0]
 800314c:	b2f6      	uxtb	r6, r6
 800314e:	1ac0      	subs	r0, r0, r3
 8003150:	6963      	ldr	r3, [r4, #20]
 8003152:	4637      	mov	r7, r6
 8003154:	4283      	cmp	r3, r0
 8003156:	dc04      	bgt.n	8003162 <__swbuf_r+0x42>
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f926 	bl	80033ac <_fflush_r>
 8003160:	bb30      	cbnz	r0, 80031b0 <__swbuf_r+0x90>
 8003162:	68a3      	ldr	r3, [r4, #8]
 8003164:	3001      	adds	r0, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	6022      	str	r2, [r4, #0]
 8003170:	701e      	strb	r6, [r3, #0]
 8003172:	6963      	ldr	r3, [r4, #20]
 8003174:	4283      	cmp	r3, r0
 8003176:	d004      	beq.n	8003182 <__swbuf_r+0x62>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	07db      	lsls	r3, r3, #31
 800317c:	d506      	bpl.n	800318c <__swbuf_r+0x6c>
 800317e:	2e0a      	cmp	r6, #10
 8003180:	d104      	bne.n	800318c <__swbuf_r+0x6c>
 8003182:	4621      	mov	r1, r4
 8003184:	4628      	mov	r0, r5
 8003186:	f000 f911 	bl	80033ac <_fflush_r>
 800318a:	b988      	cbnz	r0, 80031b0 <__swbuf_r+0x90>
 800318c:	4638      	mov	r0, r7
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <__swbuf_r+0x9c>)
 8003192:	429c      	cmp	r4, r3
 8003194:	d101      	bne.n	800319a <__swbuf_r+0x7a>
 8003196:	68ac      	ldr	r4, [r5, #8]
 8003198:	e7cf      	b.n	800313a <__swbuf_r+0x1a>
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <__swbuf_r+0xa0>)
 800319c:	429c      	cmp	r4, r3
 800319e:	bf08      	it	eq
 80031a0:	68ec      	ldreq	r4, [r5, #12]
 80031a2:	e7ca      	b.n	800313a <__swbuf_r+0x1a>
 80031a4:	4621      	mov	r1, r4
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 f80c 	bl	80031c4 <__swsetup_r>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d0cb      	beq.n	8003148 <__swbuf_r+0x28>
 80031b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80031b4:	e7ea      	b.n	800318c <__swbuf_r+0x6c>
 80031b6:	bf00      	nop
 80031b8:	080044b4 	.word	0x080044b4
 80031bc:	080044d4 	.word	0x080044d4
 80031c0:	08004494 	.word	0x08004494

080031c4 <__swsetup_r>:
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <__swsetup_r+0xcc>)
 80031c6:	b570      	push	{r4, r5, r6, lr}
 80031c8:	681d      	ldr	r5, [r3, #0]
 80031ca:	4606      	mov	r6, r0
 80031cc:	460c      	mov	r4, r1
 80031ce:	b125      	cbz	r5, 80031da <__swsetup_r+0x16>
 80031d0:	69ab      	ldr	r3, [r5, #24]
 80031d2:	b913      	cbnz	r3, 80031da <__swsetup_r+0x16>
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 f97d 	bl	80034d4 <__sinit>
 80031da:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <__swsetup_r+0xd0>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d10f      	bne.n	8003200 <__swsetup_r+0x3c>
 80031e0:	686c      	ldr	r4, [r5, #4]
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031e8:	0719      	lsls	r1, r3, #28
 80031ea:	d42c      	bmi.n	8003246 <__swsetup_r+0x82>
 80031ec:	06dd      	lsls	r5, r3, #27
 80031ee:	d411      	bmi.n	8003214 <__swsetup_r+0x50>
 80031f0:	2309      	movs	r3, #9
 80031f2:	6033      	str	r3, [r6, #0]
 80031f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031fc:	81a3      	strh	r3, [r4, #12]
 80031fe:	e03e      	b.n	800327e <__swsetup_r+0xba>
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <__swsetup_r+0xd4>)
 8003202:	429c      	cmp	r4, r3
 8003204:	d101      	bne.n	800320a <__swsetup_r+0x46>
 8003206:	68ac      	ldr	r4, [r5, #8]
 8003208:	e7eb      	b.n	80031e2 <__swsetup_r+0x1e>
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <__swsetup_r+0xd8>)
 800320c:	429c      	cmp	r4, r3
 800320e:	bf08      	it	eq
 8003210:	68ec      	ldreq	r4, [r5, #12]
 8003212:	e7e6      	b.n	80031e2 <__swsetup_r+0x1e>
 8003214:	0758      	lsls	r0, r3, #29
 8003216:	d512      	bpl.n	800323e <__swsetup_r+0x7a>
 8003218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800321a:	b141      	cbz	r1, 800322e <__swsetup_r+0x6a>
 800321c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003220:	4299      	cmp	r1, r3
 8003222:	d002      	beq.n	800322a <__swsetup_r+0x66>
 8003224:	4630      	mov	r0, r6
 8003226:	f000 fa59 	bl	80036dc <_free_r>
 800322a:	2300      	movs	r3, #0
 800322c:	6363      	str	r3, [r4, #52]	; 0x34
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003234:	81a3      	strh	r3, [r4, #12]
 8003236:	2300      	movs	r3, #0
 8003238:	6063      	str	r3, [r4, #4]
 800323a:	6923      	ldr	r3, [r4, #16]
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	b94b      	cbnz	r3, 800325e <__swsetup_r+0x9a>
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d003      	beq.n	800325e <__swsetup_r+0x9a>
 8003256:	4621      	mov	r1, r4
 8003258:	4630      	mov	r0, r6
 800325a:	f000 f9ff 	bl	800365c <__smakebuf_r>
 800325e:	89a0      	ldrh	r0, [r4, #12]
 8003260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003264:	f010 0301 	ands.w	r3, r0, #1
 8003268:	d00a      	beq.n	8003280 <__swsetup_r+0xbc>
 800326a:	2300      	movs	r3, #0
 800326c:	60a3      	str	r3, [r4, #8]
 800326e:	6963      	ldr	r3, [r4, #20]
 8003270:	425b      	negs	r3, r3
 8003272:	61a3      	str	r3, [r4, #24]
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	b943      	cbnz	r3, 800328a <__swsetup_r+0xc6>
 8003278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800327c:	d1ba      	bne.n	80031f4 <__swsetup_r+0x30>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	0781      	lsls	r1, r0, #30
 8003282:	bf58      	it	pl
 8003284:	6963      	ldrpl	r3, [r4, #20]
 8003286:	60a3      	str	r3, [r4, #8]
 8003288:	e7f4      	b.n	8003274 <__swsetup_r+0xb0>
 800328a:	2000      	movs	r0, #0
 800328c:	e7f7      	b.n	800327e <__swsetup_r+0xba>
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c
 8003294:	080044b4 	.word	0x080044b4
 8003298:	080044d4 	.word	0x080044d4
 800329c:	08004494 	.word	0x08004494

080032a0 <__sflush_r>:
 80032a0:	898a      	ldrh	r2, [r1, #12]
 80032a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a6:	4605      	mov	r5, r0
 80032a8:	0710      	lsls	r0, r2, #28
 80032aa:	460c      	mov	r4, r1
 80032ac:	d458      	bmi.n	8003360 <__sflush_r+0xc0>
 80032ae:	684b      	ldr	r3, [r1, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	dc05      	bgt.n	80032c0 <__sflush_r+0x20>
 80032b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	dc02      	bgt.n	80032c0 <__sflush_r+0x20>
 80032ba:	2000      	movs	r0, #0
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032c2:	2e00      	cmp	r6, #0
 80032c4:	d0f9      	beq.n	80032ba <__sflush_r+0x1a>
 80032c6:	2300      	movs	r3, #0
 80032c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032cc:	682f      	ldr	r7, [r5, #0]
 80032ce:	602b      	str	r3, [r5, #0]
 80032d0:	d032      	beq.n	8003338 <__sflush_r+0x98>
 80032d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	075a      	lsls	r2, r3, #29
 80032d8:	d505      	bpl.n	80032e6 <__sflush_r+0x46>
 80032da:	6863      	ldr	r3, [r4, #4]
 80032dc:	1ac0      	subs	r0, r0, r3
 80032de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032e0:	b10b      	cbz	r3, 80032e6 <__sflush_r+0x46>
 80032e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e4:	1ac0      	subs	r0, r0, r3
 80032e6:	2300      	movs	r3, #0
 80032e8:	4602      	mov	r2, r0
 80032ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032ec:	4628      	mov	r0, r5
 80032ee:	6a21      	ldr	r1, [r4, #32]
 80032f0:	47b0      	blx	r6
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	d106      	bne.n	8003306 <__sflush_r+0x66>
 80032f8:	6829      	ldr	r1, [r5, #0]
 80032fa:	291d      	cmp	r1, #29
 80032fc:	d82c      	bhi.n	8003358 <__sflush_r+0xb8>
 80032fe:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <__sflush_r+0x108>)
 8003300:	40ca      	lsrs	r2, r1
 8003302:	07d6      	lsls	r6, r2, #31
 8003304:	d528      	bpl.n	8003358 <__sflush_r+0xb8>
 8003306:	2200      	movs	r2, #0
 8003308:	6062      	str	r2, [r4, #4]
 800330a:	6922      	ldr	r2, [r4, #16]
 800330c:	04d9      	lsls	r1, r3, #19
 800330e:	6022      	str	r2, [r4, #0]
 8003310:	d504      	bpl.n	800331c <__sflush_r+0x7c>
 8003312:	1c42      	adds	r2, r0, #1
 8003314:	d101      	bne.n	800331a <__sflush_r+0x7a>
 8003316:	682b      	ldr	r3, [r5, #0]
 8003318:	b903      	cbnz	r3, 800331c <__sflush_r+0x7c>
 800331a:	6560      	str	r0, [r4, #84]	; 0x54
 800331c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800331e:	602f      	str	r7, [r5, #0]
 8003320:	2900      	cmp	r1, #0
 8003322:	d0ca      	beq.n	80032ba <__sflush_r+0x1a>
 8003324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003328:	4299      	cmp	r1, r3
 800332a:	d002      	beq.n	8003332 <__sflush_r+0x92>
 800332c:	4628      	mov	r0, r5
 800332e:	f000 f9d5 	bl	80036dc <_free_r>
 8003332:	2000      	movs	r0, #0
 8003334:	6360      	str	r0, [r4, #52]	; 0x34
 8003336:	e7c1      	b.n	80032bc <__sflush_r+0x1c>
 8003338:	6a21      	ldr	r1, [r4, #32]
 800333a:	2301      	movs	r3, #1
 800333c:	4628      	mov	r0, r5
 800333e:	47b0      	blx	r6
 8003340:	1c41      	adds	r1, r0, #1
 8003342:	d1c7      	bne.n	80032d4 <__sflush_r+0x34>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0c4      	beq.n	80032d4 <__sflush_r+0x34>
 800334a:	2b1d      	cmp	r3, #29
 800334c:	d001      	beq.n	8003352 <__sflush_r+0xb2>
 800334e:	2b16      	cmp	r3, #22
 8003350:	d101      	bne.n	8003356 <__sflush_r+0xb6>
 8003352:	602f      	str	r7, [r5, #0]
 8003354:	e7b1      	b.n	80032ba <__sflush_r+0x1a>
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335c:	81a3      	strh	r3, [r4, #12]
 800335e:	e7ad      	b.n	80032bc <__sflush_r+0x1c>
 8003360:	690f      	ldr	r7, [r1, #16]
 8003362:	2f00      	cmp	r7, #0
 8003364:	d0a9      	beq.n	80032ba <__sflush_r+0x1a>
 8003366:	0793      	lsls	r3, r2, #30
 8003368:	bf18      	it	ne
 800336a:	2300      	movne	r3, #0
 800336c:	680e      	ldr	r6, [r1, #0]
 800336e:	bf08      	it	eq
 8003370:	694b      	ldreq	r3, [r1, #20]
 8003372:	eba6 0807 	sub.w	r8, r6, r7
 8003376:	600f      	str	r7, [r1, #0]
 8003378:	608b      	str	r3, [r1, #8]
 800337a:	f1b8 0f00 	cmp.w	r8, #0
 800337e:	dd9c      	ble.n	80032ba <__sflush_r+0x1a>
 8003380:	4643      	mov	r3, r8
 8003382:	463a      	mov	r2, r7
 8003384:	4628      	mov	r0, r5
 8003386:	6a21      	ldr	r1, [r4, #32]
 8003388:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800338a:	47b0      	blx	r6
 800338c:	2800      	cmp	r0, #0
 800338e:	dc06      	bgt.n	800339e <__sflush_r+0xfe>
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800339a:	81a3      	strh	r3, [r4, #12]
 800339c:	e78e      	b.n	80032bc <__sflush_r+0x1c>
 800339e:	4407      	add	r7, r0
 80033a0:	eba8 0800 	sub.w	r8, r8, r0
 80033a4:	e7e9      	b.n	800337a <__sflush_r+0xda>
 80033a6:	bf00      	nop
 80033a8:	20400001 	.word	0x20400001

080033ac <_fflush_r>:
 80033ac:	b538      	push	{r3, r4, r5, lr}
 80033ae:	690b      	ldr	r3, [r1, #16]
 80033b0:	4605      	mov	r5, r0
 80033b2:	460c      	mov	r4, r1
 80033b4:	b913      	cbnz	r3, 80033bc <_fflush_r+0x10>
 80033b6:	2500      	movs	r5, #0
 80033b8:	4628      	mov	r0, r5
 80033ba:	bd38      	pop	{r3, r4, r5, pc}
 80033bc:	b118      	cbz	r0, 80033c6 <_fflush_r+0x1a>
 80033be:	6983      	ldr	r3, [r0, #24]
 80033c0:	b90b      	cbnz	r3, 80033c6 <_fflush_r+0x1a>
 80033c2:	f000 f887 	bl	80034d4 <__sinit>
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <_fflush_r+0x6c>)
 80033c8:	429c      	cmp	r4, r3
 80033ca:	d11b      	bne.n	8003404 <_fflush_r+0x58>
 80033cc:	686c      	ldr	r4, [r5, #4]
 80033ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ef      	beq.n	80033b6 <_fflush_r+0xa>
 80033d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033d8:	07d0      	lsls	r0, r2, #31
 80033da:	d404      	bmi.n	80033e6 <_fflush_r+0x3a>
 80033dc:	0599      	lsls	r1, r3, #22
 80033de:	d402      	bmi.n	80033e6 <_fflush_r+0x3a>
 80033e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033e2:	f000 f915 	bl	8003610 <__retarget_lock_acquire_recursive>
 80033e6:	4628      	mov	r0, r5
 80033e8:	4621      	mov	r1, r4
 80033ea:	f7ff ff59 	bl	80032a0 <__sflush_r>
 80033ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033f0:	4605      	mov	r5, r0
 80033f2:	07da      	lsls	r2, r3, #31
 80033f4:	d4e0      	bmi.n	80033b8 <_fflush_r+0xc>
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	059b      	lsls	r3, r3, #22
 80033fa:	d4dd      	bmi.n	80033b8 <_fflush_r+0xc>
 80033fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033fe:	f000 f908 	bl	8003612 <__retarget_lock_release_recursive>
 8003402:	e7d9      	b.n	80033b8 <_fflush_r+0xc>
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <_fflush_r+0x70>)
 8003406:	429c      	cmp	r4, r3
 8003408:	d101      	bne.n	800340e <_fflush_r+0x62>
 800340a:	68ac      	ldr	r4, [r5, #8]
 800340c:	e7df      	b.n	80033ce <_fflush_r+0x22>
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <_fflush_r+0x74>)
 8003410:	429c      	cmp	r4, r3
 8003412:	bf08      	it	eq
 8003414:	68ec      	ldreq	r4, [r5, #12]
 8003416:	e7da      	b.n	80033ce <_fflush_r+0x22>
 8003418:	080044b4 	.word	0x080044b4
 800341c:	080044d4 	.word	0x080044d4
 8003420:	08004494 	.word	0x08004494

08003424 <std>:
 8003424:	2300      	movs	r3, #0
 8003426:	b510      	push	{r4, lr}
 8003428:	4604      	mov	r4, r0
 800342a:	e9c0 3300 	strd	r3, r3, [r0]
 800342e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003432:	6083      	str	r3, [r0, #8]
 8003434:	8181      	strh	r1, [r0, #12]
 8003436:	6643      	str	r3, [r0, #100]	; 0x64
 8003438:	81c2      	strh	r2, [r0, #14]
 800343a:	6183      	str	r3, [r0, #24]
 800343c:	4619      	mov	r1, r3
 800343e:	2208      	movs	r2, #8
 8003440:	305c      	adds	r0, #92	; 0x5c
 8003442:	f7ff fdb7 	bl	8002fb4 <memset>
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <std+0x38>)
 8003448:	6224      	str	r4, [r4, #32]
 800344a:	6263      	str	r3, [r4, #36]	; 0x24
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <std+0x3c>)
 800344e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <std+0x40>)
 8003452:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <std+0x44>)
 8003456:	6323      	str	r3, [r4, #48]	; 0x30
 8003458:	bd10      	pop	{r4, pc}
 800345a:	bf00      	nop
 800345c:	080040dd 	.word	0x080040dd
 8003460:	080040ff 	.word	0x080040ff
 8003464:	08004137 	.word	0x08004137
 8003468:	0800415b 	.word	0x0800415b

0800346c <_cleanup_r>:
 800346c:	4901      	ldr	r1, [pc, #4]	; (8003474 <_cleanup_r+0x8>)
 800346e:	f000 b8af 	b.w	80035d0 <_fwalk_reent>
 8003472:	bf00      	nop
 8003474:	080033ad 	.word	0x080033ad

08003478 <__sfmoreglue>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	2568      	movs	r5, #104	; 0x68
 800347c:	1e4a      	subs	r2, r1, #1
 800347e:	4355      	muls	r5, r2
 8003480:	460e      	mov	r6, r1
 8003482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003486:	f000 f975 	bl	8003774 <_malloc_r>
 800348a:	4604      	mov	r4, r0
 800348c:	b140      	cbz	r0, 80034a0 <__sfmoreglue+0x28>
 800348e:	2100      	movs	r1, #0
 8003490:	e9c0 1600 	strd	r1, r6, [r0]
 8003494:	300c      	adds	r0, #12
 8003496:	60a0      	str	r0, [r4, #8]
 8003498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800349c:	f7ff fd8a 	bl	8002fb4 <memset>
 80034a0:	4620      	mov	r0, r4
 80034a2:	bd70      	pop	{r4, r5, r6, pc}

080034a4 <__sfp_lock_acquire>:
 80034a4:	4801      	ldr	r0, [pc, #4]	; (80034ac <__sfp_lock_acquire+0x8>)
 80034a6:	f000 b8b3 	b.w	8003610 <__retarget_lock_acquire_recursive>
 80034aa:	bf00      	nop
 80034ac:	20000488 	.word	0x20000488

080034b0 <__sfp_lock_release>:
 80034b0:	4801      	ldr	r0, [pc, #4]	; (80034b8 <__sfp_lock_release+0x8>)
 80034b2:	f000 b8ae 	b.w	8003612 <__retarget_lock_release_recursive>
 80034b6:	bf00      	nop
 80034b8:	20000488 	.word	0x20000488

080034bc <__sinit_lock_acquire>:
 80034bc:	4801      	ldr	r0, [pc, #4]	; (80034c4 <__sinit_lock_acquire+0x8>)
 80034be:	f000 b8a7 	b.w	8003610 <__retarget_lock_acquire_recursive>
 80034c2:	bf00      	nop
 80034c4:	20000483 	.word	0x20000483

080034c8 <__sinit_lock_release>:
 80034c8:	4801      	ldr	r0, [pc, #4]	; (80034d0 <__sinit_lock_release+0x8>)
 80034ca:	f000 b8a2 	b.w	8003612 <__retarget_lock_release_recursive>
 80034ce:	bf00      	nop
 80034d0:	20000483 	.word	0x20000483

080034d4 <__sinit>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	4604      	mov	r4, r0
 80034d8:	f7ff fff0 	bl	80034bc <__sinit_lock_acquire>
 80034dc:	69a3      	ldr	r3, [r4, #24]
 80034de:	b11b      	cbz	r3, 80034e8 <__sinit+0x14>
 80034e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e4:	f7ff bff0 	b.w	80034c8 <__sinit_lock_release>
 80034e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034ec:	6523      	str	r3, [r4, #80]	; 0x50
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <__sinit+0x68>)
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <__sinit+0x6c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	bf08      	it	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	4620      	mov	r0, r4
 80034fe:	bf08      	it	eq
 8003500:	61a3      	streq	r3, [r4, #24]
 8003502:	f000 f81f 	bl	8003544 <__sfp>
 8003506:	6060      	str	r0, [r4, #4]
 8003508:	4620      	mov	r0, r4
 800350a:	f000 f81b 	bl	8003544 <__sfp>
 800350e:	60a0      	str	r0, [r4, #8]
 8003510:	4620      	mov	r0, r4
 8003512:	f000 f817 	bl	8003544 <__sfp>
 8003516:	2200      	movs	r2, #0
 8003518:	2104      	movs	r1, #4
 800351a:	60e0      	str	r0, [r4, #12]
 800351c:	6860      	ldr	r0, [r4, #4]
 800351e:	f7ff ff81 	bl	8003424 <std>
 8003522:	2201      	movs	r2, #1
 8003524:	2109      	movs	r1, #9
 8003526:	68a0      	ldr	r0, [r4, #8]
 8003528:	f7ff ff7c 	bl	8003424 <std>
 800352c:	2202      	movs	r2, #2
 800352e:	2112      	movs	r1, #18
 8003530:	68e0      	ldr	r0, [r4, #12]
 8003532:	f7ff ff77 	bl	8003424 <std>
 8003536:	2301      	movs	r3, #1
 8003538:	61a3      	str	r3, [r4, #24]
 800353a:	e7d1      	b.n	80034e0 <__sinit+0xc>
 800353c:	08004490 	.word	0x08004490
 8003540:	0800346d 	.word	0x0800346d

08003544 <__sfp>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	4607      	mov	r7, r0
 8003548:	f7ff ffac 	bl	80034a4 <__sfp_lock_acquire>
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <__sfp+0x84>)
 800354e:	681e      	ldr	r6, [r3, #0]
 8003550:	69b3      	ldr	r3, [r6, #24]
 8003552:	b913      	cbnz	r3, 800355a <__sfp+0x16>
 8003554:	4630      	mov	r0, r6
 8003556:	f7ff ffbd 	bl	80034d4 <__sinit>
 800355a:	3648      	adds	r6, #72	; 0x48
 800355c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003560:	3b01      	subs	r3, #1
 8003562:	d503      	bpl.n	800356c <__sfp+0x28>
 8003564:	6833      	ldr	r3, [r6, #0]
 8003566:	b30b      	cbz	r3, 80035ac <__sfp+0x68>
 8003568:	6836      	ldr	r6, [r6, #0]
 800356a:	e7f7      	b.n	800355c <__sfp+0x18>
 800356c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003570:	b9d5      	cbnz	r5, 80035a8 <__sfp+0x64>
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <__sfp+0x88>)
 8003574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003578:	60e3      	str	r3, [r4, #12]
 800357a:	6665      	str	r5, [r4, #100]	; 0x64
 800357c:	f000 f847 	bl	800360e <__retarget_lock_init_recursive>
 8003580:	f7ff ff96 	bl	80034b0 <__sfp_lock_release>
 8003584:	2208      	movs	r2, #8
 8003586:	4629      	mov	r1, r5
 8003588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800358c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003590:	6025      	str	r5, [r4, #0]
 8003592:	61a5      	str	r5, [r4, #24]
 8003594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003598:	f7ff fd0c 	bl	8002fb4 <memset>
 800359c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035a4:	4620      	mov	r0, r4
 80035a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a8:	3468      	adds	r4, #104	; 0x68
 80035aa:	e7d9      	b.n	8003560 <__sfp+0x1c>
 80035ac:	2104      	movs	r1, #4
 80035ae:	4638      	mov	r0, r7
 80035b0:	f7ff ff62 	bl	8003478 <__sfmoreglue>
 80035b4:	4604      	mov	r4, r0
 80035b6:	6030      	str	r0, [r6, #0]
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d1d5      	bne.n	8003568 <__sfp+0x24>
 80035bc:	f7ff ff78 	bl	80034b0 <__sfp_lock_release>
 80035c0:	230c      	movs	r3, #12
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	e7ee      	b.n	80035a4 <__sfp+0x60>
 80035c6:	bf00      	nop
 80035c8:	08004490 	.word	0x08004490
 80035cc:	ffff0001 	.word	0xffff0001

080035d0 <_fwalk_reent>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	4606      	mov	r6, r0
 80035d6:	4688      	mov	r8, r1
 80035d8:	2700      	movs	r7, #0
 80035da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035e2:	f1b9 0901 	subs.w	r9, r9, #1
 80035e6:	d505      	bpl.n	80035f4 <_fwalk_reent+0x24>
 80035e8:	6824      	ldr	r4, [r4, #0]
 80035ea:	2c00      	cmp	r4, #0
 80035ec:	d1f7      	bne.n	80035de <_fwalk_reent+0xe>
 80035ee:	4638      	mov	r0, r7
 80035f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035f4:	89ab      	ldrh	r3, [r5, #12]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d907      	bls.n	800360a <_fwalk_reent+0x3a>
 80035fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035fe:	3301      	adds	r3, #1
 8003600:	d003      	beq.n	800360a <_fwalk_reent+0x3a>
 8003602:	4629      	mov	r1, r5
 8003604:	4630      	mov	r0, r6
 8003606:	47c0      	blx	r8
 8003608:	4307      	orrs	r7, r0
 800360a:	3568      	adds	r5, #104	; 0x68
 800360c:	e7e9      	b.n	80035e2 <_fwalk_reent+0x12>

0800360e <__retarget_lock_init_recursive>:
 800360e:	4770      	bx	lr

08003610 <__retarget_lock_acquire_recursive>:
 8003610:	4770      	bx	lr

08003612 <__retarget_lock_release_recursive>:
 8003612:	4770      	bx	lr

08003614 <__swhatbuf_r>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	460e      	mov	r6, r1
 8003618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800361c:	4614      	mov	r4, r2
 800361e:	2900      	cmp	r1, #0
 8003620:	461d      	mov	r5, r3
 8003622:	b096      	sub	sp, #88	; 0x58
 8003624:	da07      	bge.n	8003636 <__swhatbuf_r+0x22>
 8003626:	2300      	movs	r3, #0
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	89b3      	ldrh	r3, [r6, #12]
 800362c:	061a      	lsls	r2, r3, #24
 800362e:	d410      	bmi.n	8003652 <__swhatbuf_r+0x3e>
 8003630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003634:	e00e      	b.n	8003654 <__swhatbuf_r+0x40>
 8003636:	466a      	mov	r2, sp
 8003638:	f000 fdb6 	bl	80041a8 <_fstat_r>
 800363c:	2800      	cmp	r0, #0
 800363e:	dbf2      	blt.n	8003626 <__swhatbuf_r+0x12>
 8003640:	9a01      	ldr	r2, [sp, #4]
 8003642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800364a:	425a      	negs	r2, r3
 800364c:	415a      	adcs	r2, r3
 800364e:	602a      	str	r2, [r5, #0]
 8003650:	e7ee      	b.n	8003630 <__swhatbuf_r+0x1c>
 8003652:	2340      	movs	r3, #64	; 0x40
 8003654:	2000      	movs	r0, #0
 8003656:	6023      	str	r3, [r4, #0]
 8003658:	b016      	add	sp, #88	; 0x58
 800365a:	bd70      	pop	{r4, r5, r6, pc}

0800365c <__smakebuf_r>:
 800365c:	898b      	ldrh	r3, [r1, #12]
 800365e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003660:	079d      	lsls	r5, r3, #30
 8003662:	4606      	mov	r6, r0
 8003664:	460c      	mov	r4, r1
 8003666:	d507      	bpl.n	8003678 <__smakebuf_r+0x1c>
 8003668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	6123      	str	r3, [r4, #16]
 8003670:	2301      	movs	r3, #1
 8003672:	6163      	str	r3, [r4, #20]
 8003674:	b002      	add	sp, #8
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	466a      	mov	r2, sp
 800367a:	ab01      	add	r3, sp, #4
 800367c:	f7ff ffca 	bl	8003614 <__swhatbuf_r>
 8003680:	9900      	ldr	r1, [sp, #0]
 8003682:	4605      	mov	r5, r0
 8003684:	4630      	mov	r0, r6
 8003686:	f000 f875 	bl	8003774 <_malloc_r>
 800368a:	b948      	cbnz	r0, 80036a0 <__smakebuf_r+0x44>
 800368c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003690:	059a      	lsls	r2, r3, #22
 8003692:	d4ef      	bmi.n	8003674 <__smakebuf_r+0x18>
 8003694:	f023 0303 	bic.w	r3, r3, #3
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	81a3      	strh	r3, [r4, #12]
 800369e:	e7e3      	b.n	8003668 <__smakebuf_r+0xc>
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <__smakebuf_r+0x7c>)
 80036a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	6020      	str	r0, [r4, #0]
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	9b00      	ldr	r3, [sp, #0]
 80036b0:	6120      	str	r0, [r4, #16]
 80036b2:	6163      	str	r3, [r4, #20]
 80036b4:	9b01      	ldr	r3, [sp, #4]
 80036b6:	b15b      	cbz	r3, 80036d0 <__smakebuf_r+0x74>
 80036b8:	4630      	mov	r0, r6
 80036ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036be:	f000 fd85 	bl	80041cc <_isatty_r>
 80036c2:	b128      	cbz	r0, 80036d0 <__smakebuf_r+0x74>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	81a3      	strh	r3, [r4, #12]
 80036d0:	89a0      	ldrh	r0, [r4, #12]
 80036d2:	4305      	orrs	r5, r0
 80036d4:	81a5      	strh	r5, [r4, #12]
 80036d6:	e7cd      	b.n	8003674 <__smakebuf_r+0x18>
 80036d8:	0800346d 	.word	0x0800346d

080036dc <_free_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4605      	mov	r5, r0
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d043      	beq.n	800376c <_free_r+0x90>
 80036e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e8:	1f0c      	subs	r4, r1, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfb8      	it	lt
 80036ee:	18e4      	addlt	r4, r4, r3
 80036f0:	f000 fdb6 	bl	8004260 <__malloc_lock>
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <_free_r+0x94>)
 80036f6:	6813      	ldr	r3, [r2, #0]
 80036f8:	4610      	mov	r0, r2
 80036fa:	b933      	cbnz	r3, 800370a <_free_r+0x2e>
 80036fc:	6063      	str	r3, [r4, #4]
 80036fe:	6014      	str	r4, [r2, #0]
 8003700:	4628      	mov	r0, r5
 8003702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003706:	f000 bdb1 	b.w	800426c <__malloc_unlock>
 800370a:	42a3      	cmp	r3, r4
 800370c:	d90a      	bls.n	8003724 <_free_r+0x48>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	1862      	adds	r2, r4, r1
 8003712:	4293      	cmp	r3, r2
 8003714:	bf01      	itttt	eq
 8003716:	681a      	ldreq	r2, [r3, #0]
 8003718:	685b      	ldreq	r3, [r3, #4]
 800371a:	1852      	addeq	r2, r2, r1
 800371c:	6022      	streq	r2, [r4, #0]
 800371e:	6063      	str	r3, [r4, #4]
 8003720:	6004      	str	r4, [r0, #0]
 8003722:	e7ed      	b.n	8003700 <_free_r+0x24>
 8003724:	461a      	mov	r2, r3
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	b10b      	cbz	r3, 800372e <_free_r+0x52>
 800372a:	42a3      	cmp	r3, r4
 800372c:	d9fa      	bls.n	8003724 <_free_r+0x48>
 800372e:	6811      	ldr	r1, [r2, #0]
 8003730:	1850      	adds	r0, r2, r1
 8003732:	42a0      	cmp	r0, r4
 8003734:	d10b      	bne.n	800374e <_free_r+0x72>
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	4401      	add	r1, r0
 800373a:	1850      	adds	r0, r2, r1
 800373c:	4283      	cmp	r3, r0
 800373e:	6011      	str	r1, [r2, #0]
 8003740:	d1de      	bne.n	8003700 <_free_r+0x24>
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4401      	add	r1, r0
 8003748:	6011      	str	r1, [r2, #0]
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	e7d8      	b.n	8003700 <_free_r+0x24>
 800374e:	d902      	bls.n	8003756 <_free_r+0x7a>
 8003750:	230c      	movs	r3, #12
 8003752:	602b      	str	r3, [r5, #0]
 8003754:	e7d4      	b.n	8003700 <_free_r+0x24>
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	1821      	adds	r1, r4, r0
 800375a:	428b      	cmp	r3, r1
 800375c:	bf01      	itttt	eq
 800375e:	6819      	ldreq	r1, [r3, #0]
 8003760:	685b      	ldreq	r3, [r3, #4]
 8003762:	1809      	addeq	r1, r1, r0
 8003764:	6021      	streq	r1, [r4, #0]
 8003766:	6063      	str	r3, [r4, #4]
 8003768:	6054      	str	r4, [r2, #4]
 800376a:	e7c9      	b.n	8003700 <_free_r+0x24>
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	bf00      	nop
 8003770:	20000090 	.word	0x20000090

08003774 <_malloc_r>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	1ccd      	adds	r5, r1, #3
 8003778:	f025 0503 	bic.w	r5, r5, #3
 800377c:	3508      	adds	r5, #8
 800377e:	2d0c      	cmp	r5, #12
 8003780:	bf38      	it	cc
 8003782:	250c      	movcc	r5, #12
 8003784:	2d00      	cmp	r5, #0
 8003786:	4606      	mov	r6, r0
 8003788:	db01      	blt.n	800378e <_malloc_r+0x1a>
 800378a:	42a9      	cmp	r1, r5
 800378c:	d903      	bls.n	8003796 <_malloc_r+0x22>
 800378e:	230c      	movs	r3, #12
 8003790:	6033      	str	r3, [r6, #0]
 8003792:	2000      	movs	r0, #0
 8003794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003796:	f000 fd63 	bl	8004260 <__malloc_lock>
 800379a:	4921      	ldr	r1, [pc, #132]	; (8003820 <_malloc_r+0xac>)
 800379c:	680a      	ldr	r2, [r1, #0]
 800379e:	4614      	mov	r4, r2
 80037a0:	b99c      	cbnz	r4, 80037ca <_malloc_r+0x56>
 80037a2:	4f20      	ldr	r7, [pc, #128]	; (8003824 <_malloc_r+0xb0>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b923      	cbnz	r3, 80037b2 <_malloc_r+0x3e>
 80037a8:	4621      	mov	r1, r4
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 fc86 	bl	80040bc <_sbrk_r>
 80037b0:	6038      	str	r0, [r7, #0]
 80037b2:	4629      	mov	r1, r5
 80037b4:	4630      	mov	r0, r6
 80037b6:	f000 fc81 	bl	80040bc <_sbrk_r>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	d123      	bne.n	8003806 <_malloc_r+0x92>
 80037be:	230c      	movs	r3, #12
 80037c0:	4630      	mov	r0, r6
 80037c2:	6033      	str	r3, [r6, #0]
 80037c4:	f000 fd52 	bl	800426c <__malloc_unlock>
 80037c8:	e7e3      	b.n	8003792 <_malloc_r+0x1e>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	1b5b      	subs	r3, r3, r5
 80037ce:	d417      	bmi.n	8003800 <_malloc_r+0x8c>
 80037d0:	2b0b      	cmp	r3, #11
 80037d2:	d903      	bls.n	80037dc <_malloc_r+0x68>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	441c      	add	r4, r3
 80037d8:	6025      	str	r5, [r4, #0]
 80037da:	e004      	b.n	80037e6 <_malloc_r+0x72>
 80037dc:	6863      	ldr	r3, [r4, #4]
 80037de:	42a2      	cmp	r2, r4
 80037e0:	bf0c      	ite	eq
 80037e2:	600b      	streq	r3, [r1, #0]
 80037e4:	6053      	strne	r3, [r2, #4]
 80037e6:	4630      	mov	r0, r6
 80037e8:	f000 fd40 	bl	800426c <__malloc_unlock>
 80037ec:	f104 000b 	add.w	r0, r4, #11
 80037f0:	1d23      	adds	r3, r4, #4
 80037f2:	f020 0007 	bic.w	r0, r0, #7
 80037f6:	1ac2      	subs	r2, r0, r3
 80037f8:	d0cc      	beq.n	8003794 <_malloc_r+0x20>
 80037fa:	1a1b      	subs	r3, r3, r0
 80037fc:	50a3      	str	r3, [r4, r2]
 80037fe:	e7c9      	b.n	8003794 <_malloc_r+0x20>
 8003800:	4622      	mov	r2, r4
 8003802:	6864      	ldr	r4, [r4, #4]
 8003804:	e7cc      	b.n	80037a0 <_malloc_r+0x2c>
 8003806:	1cc4      	adds	r4, r0, #3
 8003808:	f024 0403 	bic.w	r4, r4, #3
 800380c:	42a0      	cmp	r0, r4
 800380e:	d0e3      	beq.n	80037d8 <_malloc_r+0x64>
 8003810:	1a21      	subs	r1, r4, r0
 8003812:	4630      	mov	r0, r6
 8003814:	f000 fc52 	bl	80040bc <_sbrk_r>
 8003818:	3001      	adds	r0, #1
 800381a:	d1dd      	bne.n	80037d8 <_malloc_r+0x64>
 800381c:	e7cf      	b.n	80037be <_malloc_r+0x4a>
 800381e:	bf00      	nop
 8003820:	20000090 	.word	0x20000090
 8003824:	20000094 	.word	0x20000094

08003828 <__ssputs_r>:
 8003828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	688e      	ldr	r6, [r1, #8]
 800382e:	4682      	mov	sl, r0
 8003830:	429e      	cmp	r6, r3
 8003832:	460c      	mov	r4, r1
 8003834:	4690      	mov	r8, r2
 8003836:	461f      	mov	r7, r3
 8003838:	d838      	bhi.n	80038ac <__ssputs_r+0x84>
 800383a:	898a      	ldrh	r2, [r1, #12]
 800383c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003840:	d032      	beq.n	80038a8 <__ssputs_r+0x80>
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	6909      	ldr	r1, [r1, #16]
 8003846:	3301      	adds	r3, #1
 8003848:	eba5 0901 	sub.w	r9, r5, r1
 800384c:	6965      	ldr	r5, [r4, #20]
 800384e:	444b      	add	r3, r9
 8003850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003858:	106d      	asrs	r5, r5, #1
 800385a:	429d      	cmp	r5, r3
 800385c:	bf38      	it	cc
 800385e:	461d      	movcc	r5, r3
 8003860:	0553      	lsls	r3, r2, #21
 8003862:	d531      	bpl.n	80038c8 <__ssputs_r+0xa0>
 8003864:	4629      	mov	r1, r5
 8003866:	f7ff ff85 	bl	8003774 <_malloc_r>
 800386a:	4606      	mov	r6, r0
 800386c:	b950      	cbnz	r0, 8003884 <__ssputs_r+0x5c>
 800386e:	230c      	movs	r3, #12
 8003870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003874:	f8ca 3000 	str.w	r3, [sl]
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387e:	81a3      	strh	r3, [r4, #12]
 8003880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003884:	464a      	mov	r2, r9
 8003886:	6921      	ldr	r1, [r4, #16]
 8003888:	f7ff fb86 	bl	8002f98 <memcpy>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	6126      	str	r6, [r4, #16]
 800389a:	444e      	add	r6, r9
 800389c:	6026      	str	r6, [r4, #0]
 800389e:	463e      	mov	r6, r7
 80038a0:	6165      	str	r5, [r4, #20]
 80038a2:	eba5 0509 	sub.w	r5, r5, r9
 80038a6:	60a5      	str	r5, [r4, #8]
 80038a8:	42be      	cmp	r6, r7
 80038aa:	d900      	bls.n	80038ae <__ssputs_r+0x86>
 80038ac:	463e      	mov	r6, r7
 80038ae:	4632      	mov	r2, r6
 80038b0:	4641      	mov	r1, r8
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f000 fcba 	bl	800422c <memmove>
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	1b9b      	subs	r3, r3, r6
 80038be:	4432      	add	r2, r6
 80038c0:	2000      	movs	r0, #0
 80038c2:	60a3      	str	r3, [r4, #8]
 80038c4:	6022      	str	r2, [r4, #0]
 80038c6:	e7db      	b.n	8003880 <__ssputs_r+0x58>
 80038c8:	462a      	mov	r2, r5
 80038ca:	f000 fcd5 	bl	8004278 <_realloc_r>
 80038ce:	4606      	mov	r6, r0
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d1e1      	bne.n	8003898 <__ssputs_r+0x70>
 80038d4:	4650      	mov	r0, sl
 80038d6:	6921      	ldr	r1, [r4, #16]
 80038d8:	f7ff ff00 	bl	80036dc <_free_r>
 80038dc:	e7c7      	b.n	800386e <__ssputs_r+0x46>
	...

080038e0 <_svfiprintf_r>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4698      	mov	r8, r3
 80038e6:	898b      	ldrh	r3, [r1, #12]
 80038e8:	4607      	mov	r7, r0
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	460d      	mov	r5, r1
 80038ee:	4614      	mov	r4, r2
 80038f0:	b09d      	sub	sp, #116	; 0x74
 80038f2:	d50e      	bpl.n	8003912 <_svfiprintf_r+0x32>
 80038f4:	690b      	ldr	r3, [r1, #16]
 80038f6:	b963      	cbnz	r3, 8003912 <_svfiprintf_r+0x32>
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	f7ff ff3b 	bl	8003774 <_malloc_r>
 80038fe:	6028      	str	r0, [r5, #0]
 8003900:	6128      	str	r0, [r5, #16]
 8003902:	b920      	cbnz	r0, 800390e <_svfiprintf_r+0x2e>
 8003904:	230c      	movs	r3, #12
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800390c:	e0d1      	b.n	8003ab2 <_svfiprintf_r+0x1d2>
 800390e:	2340      	movs	r3, #64	; 0x40
 8003910:	616b      	str	r3, [r5, #20]
 8003912:	2300      	movs	r3, #0
 8003914:	9309      	str	r3, [sp, #36]	; 0x24
 8003916:	2320      	movs	r3, #32
 8003918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800391c:	2330      	movs	r3, #48	; 0x30
 800391e:	f04f 0901 	mov.w	r9, #1
 8003922:	f8cd 800c 	str.w	r8, [sp, #12]
 8003926:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003acc <_svfiprintf_r+0x1ec>
 800392a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800392e:	4623      	mov	r3, r4
 8003930:	469a      	mov	sl, r3
 8003932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003936:	b10a      	cbz	r2, 800393c <_svfiprintf_r+0x5c>
 8003938:	2a25      	cmp	r2, #37	; 0x25
 800393a:	d1f9      	bne.n	8003930 <_svfiprintf_r+0x50>
 800393c:	ebba 0b04 	subs.w	fp, sl, r4
 8003940:	d00b      	beq.n	800395a <_svfiprintf_r+0x7a>
 8003942:	465b      	mov	r3, fp
 8003944:	4622      	mov	r2, r4
 8003946:	4629      	mov	r1, r5
 8003948:	4638      	mov	r0, r7
 800394a:	f7ff ff6d 	bl	8003828 <__ssputs_r>
 800394e:	3001      	adds	r0, #1
 8003950:	f000 80aa 	beq.w	8003aa8 <_svfiprintf_r+0x1c8>
 8003954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003956:	445a      	add	r2, fp
 8003958:	9209      	str	r2, [sp, #36]	; 0x24
 800395a:	f89a 3000 	ldrb.w	r3, [sl]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a2 	beq.w	8003aa8 <_svfiprintf_r+0x1c8>
 8003964:	2300      	movs	r3, #0
 8003966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800396a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800396e:	f10a 0a01 	add.w	sl, sl, #1
 8003972:	9304      	str	r3, [sp, #16]
 8003974:	9307      	str	r3, [sp, #28]
 8003976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800397a:	931a      	str	r3, [sp, #104]	; 0x68
 800397c:	4654      	mov	r4, sl
 800397e:	2205      	movs	r2, #5
 8003980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003984:	4851      	ldr	r0, [pc, #324]	; (8003acc <_svfiprintf_r+0x1ec>)
 8003986:	f000 fc43 	bl	8004210 <memchr>
 800398a:	9a04      	ldr	r2, [sp, #16]
 800398c:	b9d8      	cbnz	r0, 80039c6 <_svfiprintf_r+0xe6>
 800398e:	06d0      	lsls	r0, r2, #27
 8003990:	bf44      	itt	mi
 8003992:	2320      	movmi	r3, #32
 8003994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003998:	0711      	lsls	r1, r2, #28
 800399a:	bf44      	itt	mi
 800399c:	232b      	movmi	r3, #43	; 0x2b
 800399e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a2:	f89a 3000 	ldrb.w	r3, [sl]
 80039a6:	2b2a      	cmp	r3, #42	; 0x2a
 80039a8:	d015      	beq.n	80039d6 <_svfiprintf_r+0xf6>
 80039aa:	4654      	mov	r4, sl
 80039ac:	2000      	movs	r0, #0
 80039ae:	f04f 0c0a 	mov.w	ip, #10
 80039b2:	9a07      	ldr	r2, [sp, #28]
 80039b4:	4621      	mov	r1, r4
 80039b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ba:	3b30      	subs	r3, #48	; 0x30
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d94e      	bls.n	8003a5e <_svfiprintf_r+0x17e>
 80039c0:	b1b0      	cbz	r0, 80039f0 <_svfiprintf_r+0x110>
 80039c2:	9207      	str	r2, [sp, #28]
 80039c4:	e014      	b.n	80039f0 <_svfiprintf_r+0x110>
 80039c6:	eba0 0308 	sub.w	r3, r0, r8
 80039ca:	fa09 f303 	lsl.w	r3, r9, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	46a2      	mov	sl, r4
 80039d2:	9304      	str	r3, [sp, #16]
 80039d4:	e7d2      	b.n	800397c <_svfiprintf_r+0x9c>
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	1d19      	adds	r1, r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	9103      	str	r1, [sp, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bfbb      	ittet	lt
 80039e2:	425b      	neglt	r3, r3
 80039e4:	f042 0202 	orrlt.w	r2, r2, #2
 80039e8:	9307      	strge	r3, [sp, #28]
 80039ea:	9307      	strlt	r3, [sp, #28]
 80039ec:	bfb8      	it	lt
 80039ee:	9204      	strlt	r2, [sp, #16]
 80039f0:	7823      	ldrb	r3, [r4, #0]
 80039f2:	2b2e      	cmp	r3, #46	; 0x2e
 80039f4:	d10c      	bne.n	8003a10 <_svfiprintf_r+0x130>
 80039f6:	7863      	ldrb	r3, [r4, #1]
 80039f8:	2b2a      	cmp	r3, #42	; 0x2a
 80039fa:	d135      	bne.n	8003a68 <_svfiprintf_r+0x188>
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	3402      	adds	r4, #2
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	9203      	str	r2, [sp, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bfb8      	it	lt
 8003a0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a0e:	9305      	str	r3, [sp, #20]
 8003a10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003adc <_svfiprintf_r+0x1fc>
 8003a14:	2203      	movs	r2, #3
 8003a16:	4650      	mov	r0, sl
 8003a18:	7821      	ldrb	r1, [r4, #0]
 8003a1a:	f000 fbf9 	bl	8004210 <memchr>
 8003a1e:	b140      	cbz	r0, 8003a32 <_svfiprintf_r+0x152>
 8003a20:	2340      	movs	r3, #64	; 0x40
 8003a22:	eba0 000a 	sub.w	r0, r0, sl
 8003a26:	fa03 f000 	lsl.w	r0, r3, r0
 8003a2a:	9b04      	ldr	r3, [sp, #16]
 8003a2c:	3401      	adds	r4, #1
 8003a2e:	4303      	orrs	r3, r0
 8003a30:	9304      	str	r3, [sp, #16]
 8003a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a36:	2206      	movs	r2, #6
 8003a38:	4825      	ldr	r0, [pc, #148]	; (8003ad0 <_svfiprintf_r+0x1f0>)
 8003a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a3e:	f000 fbe7 	bl	8004210 <memchr>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d038      	beq.n	8003ab8 <_svfiprintf_r+0x1d8>
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <_svfiprintf_r+0x1f4>)
 8003a48:	bb1b      	cbnz	r3, 8003a92 <_svfiprintf_r+0x1b2>
 8003a4a:	9b03      	ldr	r3, [sp, #12]
 8003a4c:	3307      	adds	r3, #7
 8003a4e:	f023 0307 	bic.w	r3, r3, #7
 8003a52:	3308      	adds	r3, #8
 8003a54:	9303      	str	r3, [sp, #12]
 8003a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a58:	4433      	add	r3, r6
 8003a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5c:	e767      	b.n	800392e <_svfiprintf_r+0x4e>
 8003a5e:	460c      	mov	r4, r1
 8003a60:	2001      	movs	r0, #1
 8003a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a66:	e7a5      	b.n	80039b4 <_svfiprintf_r+0xd4>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f04f 0c0a 	mov.w	ip, #10
 8003a6e:	4619      	mov	r1, r3
 8003a70:	3401      	adds	r4, #1
 8003a72:	9305      	str	r3, [sp, #20]
 8003a74:	4620      	mov	r0, r4
 8003a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a7a:	3a30      	subs	r2, #48	; 0x30
 8003a7c:	2a09      	cmp	r2, #9
 8003a7e:	d903      	bls.n	8003a88 <_svfiprintf_r+0x1a8>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0c5      	beq.n	8003a10 <_svfiprintf_r+0x130>
 8003a84:	9105      	str	r1, [sp, #20]
 8003a86:	e7c3      	b.n	8003a10 <_svfiprintf_r+0x130>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a90:	e7f0      	b.n	8003a74 <_svfiprintf_r+0x194>
 8003a92:	ab03      	add	r3, sp, #12
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	462a      	mov	r2, r5
 8003a98:	4638      	mov	r0, r7
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <_svfiprintf_r+0x1f8>)
 8003a9c:	a904      	add	r1, sp, #16
 8003a9e:	f3af 8000 	nop.w
 8003aa2:	1c42      	adds	r2, r0, #1
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	d1d6      	bne.n	8003a56 <_svfiprintf_r+0x176>
 8003aa8:	89ab      	ldrh	r3, [r5, #12]
 8003aaa:	065b      	lsls	r3, r3, #25
 8003aac:	f53f af2c 	bmi.w	8003908 <_svfiprintf_r+0x28>
 8003ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab2:	b01d      	add	sp, #116	; 0x74
 8003ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab8:	ab03      	add	r3, sp, #12
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4638      	mov	r0, r7
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <_svfiprintf_r+0x1f8>)
 8003ac2:	a904      	add	r1, sp, #16
 8003ac4:	f000 f9d4 	bl	8003e70 <_printf_i>
 8003ac8:	e7eb      	b.n	8003aa2 <_svfiprintf_r+0x1c2>
 8003aca:	bf00      	nop
 8003acc:	080044f4 	.word	0x080044f4
 8003ad0:	080044fe 	.word	0x080044fe
 8003ad4:	00000000 	.word	0x00000000
 8003ad8:	08003829 	.word	0x08003829
 8003adc:	080044fa 	.word	0x080044fa

08003ae0 <__sfputc_r>:
 8003ae0:	6893      	ldr	r3, [r2, #8]
 8003ae2:	b410      	push	{r4}
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	6093      	str	r3, [r2, #8]
 8003aea:	da07      	bge.n	8003afc <__sfputc_r+0x1c>
 8003aec:	6994      	ldr	r4, [r2, #24]
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	db01      	blt.n	8003af6 <__sfputc_r+0x16>
 8003af2:	290a      	cmp	r1, #10
 8003af4:	d102      	bne.n	8003afc <__sfputc_r+0x1c>
 8003af6:	bc10      	pop	{r4}
 8003af8:	f7ff bb12 	b.w	8003120 <__swbuf_r>
 8003afc:	6813      	ldr	r3, [r2, #0]
 8003afe:	1c58      	adds	r0, r3, #1
 8003b00:	6010      	str	r0, [r2, #0]
 8003b02:	7019      	strb	r1, [r3, #0]
 8003b04:	4608      	mov	r0, r1
 8003b06:	bc10      	pop	{r4}
 8003b08:	4770      	bx	lr

08003b0a <__sfputs_r>:
 8003b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	460f      	mov	r7, r1
 8003b10:	4614      	mov	r4, r2
 8003b12:	18d5      	adds	r5, r2, r3
 8003b14:	42ac      	cmp	r4, r5
 8003b16:	d101      	bne.n	8003b1c <__sfputs_r+0x12>
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e007      	b.n	8003b2c <__sfputs_r+0x22>
 8003b1c:	463a      	mov	r2, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b24:	f7ff ffdc 	bl	8003ae0 <__sfputc_r>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d1f3      	bne.n	8003b14 <__sfputs_r+0xa>
 8003b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b30 <_vfiprintf_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	460d      	mov	r5, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	4698      	mov	r8, r3
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	b09d      	sub	sp, #116	; 0x74
 8003b3e:	b118      	cbz	r0, 8003b48 <_vfiprintf_r+0x18>
 8003b40:	6983      	ldr	r3, [r0, #24]
 8003b42:	b90b      	cbnz	r3, 8003b48 <_vfiprintf_r+0x18>
 8003b44:	f7ff fcc6 	bl	80034d4 <__sinit>
 8003b48:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <_vfiprintf_r+0x240>)
 8003b4a:	429d      	cmp	r5, r3
 8003b4c:	d11b      	bne.n	8003b86 <_vfiprintf_r+0x56>
 8003b4e:	6875      	ldr	r5, [r6, #4]
 8003b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b52:	07d9      	lsls	r1, r3, #31
 8003b54:	d405      	bmi.n	8003b62 <_vfiprintf_r+0x32>
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	059a      	lsls	r2, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_vfiprintf_r+0x32>
 8003b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b5e:	f7ff fd57 	bl	8003610 <__retarget_lock_acquire_recursive>
 8003b62:	89ab      	ldrh	r3, [r5, #12]
 8003b64:	071b      	lsls	r3, r3, #28
 8003b66:	d501      	bpl.n	8003b6c <_vfiprintf_r+0x3c>
 8003b68:	692b      	ldr	r3, [r5, #16]
 8003b6a:	b9eb      	cbnz	r3, 8003ba8 <_vfiprintf_r+0x78>
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff fb28 	bl	80031c4 <__swsetup_r>
 8003b74:	b1c0      	cbz	r0, 8003ba8 <_vfiprintf_r+0x78>
 8003b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b78:	07dc      	lsls	r4, r3, #31
 8003b7a:	d50e      	bpl.n	8003b9a <_vfiprintf_r+0x6a>
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b80:	b01d      	add	sp, #116	; 0x74
 8003b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b86:	4b7b      	ldr	r3, [pc, #492]	; (8003d74 <_vfiprintf_r+0x244>)
 8003b88:	429d      	cmp	r5, r3
 8003b8a:	d101      	bne.n	8003b90 <_vfiprintf_r+0x60>
 8003b8c:	68b5      	ldr	r5, [r6, #8]
 8003b8e:	e7df      	b.n	8003b50 <_vfiprintf_r+0x20>
 8003b90:	4b79      	ldr	r3, [pc, #484]	; (8003d78 <_vfiprintf_r+0x248>)
 8003b92:	429d      	cmp	r5, r3
 8003b94:	bf08      	it	eq
 8003b96:	68f5      	ldreq	r5, [r6, #12]
 8003b98:	e7da      	b.n	8003b50 <_vfiprintf_r+0x20>
 8003b9a:	89ab      	ldrh	r3, [r5, #12]
 8003b9c:	0598      	lsls	r0, r3, #22
 8003b9e:	d4ed      	bmi.n	8003b7c <_vfiprintf_r+0x4c>
 8003ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ba2:	f7ff fd36 	bl	8003612 <__retarget_lock_release_recursive>
 8003ba6:	e7e9      	b.n	8003b7c <_vfiprintf_r+0x4c>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bac:	2320      	movs	r3, #32
 8003bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb2:	2330      	movs	r3, #48	; 0x30
 8003bb4:	f04f 0901 	mov.w	r9, #1
 8003bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003d7c <_vfiprintf_r+0x24c>
 8003bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	469a      	mov	sl, r3
 8003bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bcc:	b10a      	cbz	r2, 8003bd2 <_vfiprintf_r+0xa2>
 8003bce:	2a25      	cmp	r2, #37	; 0x25
 8003bd0:	d1f9      	bne.n	8003bc6 <_vfiprintf_r+0x96>
 8003bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003bd6:	d00b      	beq.n	8003bf0 <_vfiprintf_r+0xc0>
 8003bd8:	465b      	mov	r3, fp
 8003bda:	4622      	mov	r2, r4
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff ff93 	bl	8003b0a <__sfputs_r>
 8003be4:	3001      	adds	r0, #1
 8003be6:	f000 80aa 	beq.w	8003d3e <_vfiprintf_r+0x20e>
 8003bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bec:	445a      	add	r2, fp
 8003bee:	9209      	str	r2, [sp, #36]	; 0x24
 8003bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a2 	beq.w	8003d3e <_vfiprintf_r+0x20e>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c04:	f10a 0a01 	add.w	sl, sl, #1
 8003c08:	9304      	str	r3, [sp, #16]
 8003c0a:	9307      	str	r3, [sp, #28]
 8003c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c10:	931a      	str	r3, [sp, #104]	; 0x68
 8003c12:	4654      	mov	r4, sl
 8003c14:	2205      	movs	r2, #5
 8003c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1a:	4858      	ldr	r0, [pc, #352]	; (8003d7c <_vfiprintf_r+0x24c>)
 8003c1c:	f000 faf8 	bl	8004210 <memchr>
 8003c20:	9a04      	ldr	r2, [sp, #16]
 8003c22:	b9d8      	cbnz	r0, 8003c5c <_vfiprintf_r+0x12c>
 8003c24:	06d1      	lsls	r1, r2, #27
 8003c26:	bf44      	itt	mi
 8003c28:	2320      	movmi	r3, #32
 8003c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c2e:	0713      	lsls	r3, r2, #28
 8003c30:	bf44      	itt	mi
 8003c32:	232b      	movmi	r3, #43	; 0x2b
 8003c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c38:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c3e:	d015      	beq.n	8003c6c <_vfiprintf_r+0x13c>
 8003c40:	4654      	mov	r4, sl
 8003c42:	2000      	movs	r0, #0
 8003c44:	f04f 0c0a 	mov.w	ip, #10
 8003c48:	9a07      	ldr	r2, [sp, #28]
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c50:	3b30      	subs	r3, #48	; 0x30
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d94e      	bls.n	8003cf4 <_vfiprintf_r+0x1c4>
 8003c56:	b1b0      	cbz	r0, 8003c86 <_vfiprintf_r+0x156>
 8003c58:	9207      	str	r2, [sp, #28]
 8003c5a:	e014      	b.n	8003c86 <_vfiprintf_r+0x156>
 8003c5c:	eba0 0308 	sub.w	r3, r0, r8
 8003c60:	fa09 f303 	lsl.w	r3, r9, r3
 8003c64:	4313      	orrs	r3, r2
 8003c66:	46a2      	mov	sl, r4
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	e7d2      	b.n	8003c12 <_vfiprintf_r+0xe2>
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	1d19      	adds	r1, r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	9103      	str	r1, [sp, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bfbb      	ittet	lt
 8003c78:	425b      	neglt	r3, r3
 8003c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003c7e:	9307      	strge	r3, [sp, #28]
 8003c80:	9307      	strlt	r3, [sp, #28]
 8003c82:	bfb8      	it	lt
 8003c84:	9204      	strlt	r2, [sp, #16]
 8003c86:	7823      	ldrb	r3, [r4, #0]
 8003c88:	2b2e      	cmp	r3, #46	; 0x2e
 8003c8a:	d10c      	bne.n	8003ca6 <_vfiprintf_r+0x176>
 8003c8c:	7863      	ldrb	r3, [r4, #1]
 8003c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c90:	d135      	bne.n	8003cfe <_vfiprintf_r+0x1ce>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	3402      	adds	r4, #2
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	9203      	str	r2, [sp, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bfb8      	it	lt
 8003ca0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003d8c <_vfiprintf_r+0x25c>
 8003caa:	2203      	movs	r2, #3
 8003cac:	4650      	mov	r0, sl
 8003cae:	7821      	ldrb	r1, [r4, #0]
 8003cb0:	f000 faae 	bl	8004210 <memchr>
 8003cb4:	b140      	cbz	r0, 8003cc8 <_vfiprintf_r+0x198>
 8003cb6:	2340      	movs	r3, #64	; 0x40
 8003cb8:	eba0 000a 	sub.w	r0, r0, sl
 8003cbc:	fa03 f000 	lsl.w	r0, r3, r0
 8003cc0:	9b04      	ldr	r3, [sp, #16]
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	4303      	orrs	r3, r0
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ccc:	2206      	movs	r2, #6
 8003cce:	482c      	ldr	r0, [pc, #176]	; (8003d80 <_vfiprintf_r+0x250>)
 8003cd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cd4:	f000 fa9c 	bl	8004210 <memchr>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d03f      	beq.n	8003d5c <_vfiprintf_r+0x22c>
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <_vfiprintf_r+0x254>)
 8003cde:	bb1b      	cbnz	r3, 8003d28 <_vfiprintf_r+0x1f8>
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	3307      	adds	r3, #7
 8003ce4:	f023 0307 	bic.w	r3, r3, #7
 8003ce8:	3308      	adds	r3, #8
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cee:	443b      	add	r3, r7
 8003cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf2:	e767      	b.n	8003bc4 <_vfiprintf_r+0x94>
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cfc:	e7a5      	b.n	8003c4a <_vfiprintf_r+0x11a>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f04f 0c0a 	mov.w	ip, #10
 8003d04:	4619      	mov	r1, r3
 8003d06:	3401      	adds	r4, #1
 8003d08:	9305      	str	r3, [sp, #20]
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d10:	3a30      	subs	r2, #48	; 0x30
 8003d12:	2a09      	cmp	r2, #9
 8003d14:	d903      	bls.n	8003d1e <_vfiprintf_r+0x1ee>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0c5      	beq.n	8003ca6 <_vfiprintf_r+0x176>
 8003d1a:	9105      	str	r1, [sp, #20]
 8003d1c:	e7c3      	b.n	8003ca6 <_vfiprintf_r+0x176>
 8003d1e:	4604      	mov	r4, r0
 8003d20:	2301      	movs	r3, #1
 8003d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d26:	e7f0      	b.n	8003d0a <_vfiprintf_r+0x1da>
 8003d28:	ab03      	add	r3, sp, #12
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	462a      	mov	r2, r5
 8003d2e:	4630      	mov	r0, r6
 8003d30:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <_vfiprintf_r+0x258>)
 8003d32:	a904      	add	r1, sp, #16
 8003d34:	f3af 8000 	nop.w
 8003d38:	4607      	mov	r7, r0
 8003d3a:	1c78      	adds	r0, r7, #1
 8003d3c:	d1d6      	bne.n	8003cec <_vfiprintf_r+0x1bc>
 8003d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d40:	07d9      	lsls	r1, r3, #31
 8003d42:	d405      	bmi.n	8003d50 <_vfiprintf_r+0x220>
 8003d44:	89ab      	ldrh	r3, [r5, #12]
 8003d46:	059a      	lsls	r2, r3, #22
 8003d48:	d402      	bmi.n	8003d50 <_vfiprintf_r+0x220>
 8003d4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d4c:	f7ff fc61 	bl	8003612 <__retarget_lock_release_recursive>
 8003d50:	89ab      	ldrh	r3, [r5, #12]
 8003d52:	065b      	lsls	r3, r3, #25
 8003d54:	f53f af12 	bmi.w	8003b7c <_vfiprintf_r+0x4c>
 8003d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d5a:	e711      	b.n	8003b80 <_vfiprintf_r+0x50>
 8003d5c:	ab03      	add	r3, sp, #12
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	462a      	mov	r2, r5
 8003d62:	4630      	mov	r0, r6
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <_vfiprintf_r+0x258>)
 8003d66:	a904      	add	r1, sp, #16
 8003d68:	f000 f882 	bl	8003e70 <_printf_i>
 8003d6c:	e7e4      	b.n	8003d38 <_vfiprintf_r+0x208>
 8003d6e:	bf00      	nop
 8003d70:	080044b4 	.word	0x080044b4
 8003d74:	080044d4 	.word	0x080044d4
 8003d78:	08004494 	.word	0x08004494
 8003d7c:	080044f4 	.word	0x080044f4
 8003d80:	080044fe 	.word	0x080044fe
 8003d84:	00000000 	.word	0x00000000
 8003d88:	08003b0b 	.word	0x08003b0b
 8003d8c:	080044fa 	.word	0x080044fa

08003d90 <_printf_common>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	4616      	mov	r6, r2
 8003d96:	4699      	mov	r9, r3
 8003d98:	688a      	ldr	r2, [r1, #8]
 8003d9a:	690b      	ldr	r3, [r1, #16]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	bfb8      	it	lt
 8003da2:	4613      	movlt	r3, r2
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003daa:	460c      	mov	r4, r1
 8003dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db0:	b10a      	cbz	r2, 8003db6 <_printf_common+0x26>
 8003db2:	3301      	adds	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	0699      	lsls	r1, r3, #26
 8003dba:	bf42      	ittt	mi
 8003dbc:	6833      	ldrmi	r3, [r6, #0]
 8003dbe:	3302      	addmi	r3, #2
 8003dc0:	6033      	strmi	r3, [r6, #0]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d106      	bne.n	8003dd8 <_printf_common+0x48>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dc28      	bgt.n	8003e2a <_printf_common+0x9a>
 8003dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ddc:	1e13      	subs	r3, r2, #0
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	bf18      	it	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	0692      	lsls	r2, r2, #26
 8003de6:	d42d      	bmi.n	8003e44 <_printf_common+0xb4>
 8003de8:	4649      	mov	r1, r9
 8003dea:	4638      	mov	r0, r7
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d020      	beq.n	8003e38 <_printf_common+0xa8>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	68e5      	ldr	r5, [r4, #12]
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf18      	it	ne
 8003e02:	2500      	movne	r5, #0
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	f04f 0600 	mov.w	r6, #0
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	bf08      	it	eq
 8003e0e:	1aad      	subeq	r5, r5, r2
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf08      	it	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfc4      	itt	gt
 8003e1c:	1a9b      	subgt	r3, r3, r2
 8003e1e:	18ed      	addgt	r5, r5, r3
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xcc>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xac>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xb0>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c4      	b.n	8003dce <_printf_common+0x3e>
 8003e44:	2030      	movs	r0, #48	; 0x30
 8003e46:	18e1      	adds	r1, r4, r3
 8003e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e52:	4422      	add	r2, r4
 8003e54:	3302      	adds	r3, #2
 8003e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5a:	e7c5      	b.n	8003de8 <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa8>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x92>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	460c      	mov	r4, r1
 8003e76:	7e27      	ldrb	r7, [r4, #24]
 8003e78:	4691      	mov	r9, r2
 8003e7a:	2f78      	cmp	r7, #120	; 0x78
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	469a      	mov	sl, r3
 8003e80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d9 	beq.w	8004044 <_printf_i+0x1d4>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80a4 	beq.w	8003fe0 <_printf_i+0x170>
 8003e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a001      	add	r0, pc, #4	; (adr r0, 8003eb0 <_printf_i+0x40>)
 8003eac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	0800402b 	.word	0x0800402b
 8003ee0:	08003f4d 	.word	0x08003f4d
 8003ee4:	0800400d 	.word	0x0800400d
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800404d 	.word	0x0800404d
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08004015 	.word	0x08004015
 8003f08:	680b      	ldr	r3, [r1, #0]
 8003f0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	600a      	str	r2, [r1, #0]
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0a4      	b.n	8004066 <_printf_i+0x1f6>
 8003f1c:	6825      	ldr	r5, [r4, #0]
 8003f1e:	6808      	ldr	r0, [r1, #0]
 8003f20:	062e      	lsls	r6, r5, #24
 8003f22:	f100 0304 	add.w	r3, r0, #4
 8003f26:	d50a      	bpl.n	8003f3e <_printf_i+0xce>
 8003f28:	6805      	ldr	r5, [r0, #0]
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xc8>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	426d      	negs	r5, r5
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f38:	230a      	movs	r3, #10
 8003f3a:	485e      	ldr	r0, [pc, #376]	; (80040b4 <_printf_i+0x244>)
 8003f3c:	e019      	b.n	8003f72 <_printf_i+0x102>
 8003f3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f42:	6805      	ldr	r5, [r0, #0]
 8003f44:	600b      	str	r3, [r1, #0]
 8003f46:	bf18      	it	ne
 8003f48:	b22d      	sxthne	r5, r5
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0xbc>
 8003f4c:	680b      	ldr	r3, [r1, #0]
 8003f4e:	6825      	ldr	r5, [r4, #0]
 8003f50:	1d18      	adds	r0, r3, #4
 8003f52:	6008      	str	r0, [r1, #0]
 8003f54:	0628      	lsls	r0, r5, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xec>
 8003f58:	681d      	ldr	r5, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xf2>
 8003f5c:	0669      	lsls	r1, r5, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f60:	881d      	ldrh	r5, [r3, #0]
 8003f62:	2f6f      	cmp	r7, #111	; 0x6f
 8003f64:	bf0c      	ite	eq
 8003f66:	2308      	moveq	r3, #8
 8003f68:	230a      	movne	r3, #10
 8003f6a:	4852      	ldr	r0, [pc, #328]	; (80040b4 <_printf_i+0x244>)
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6866      	ldr	r6, [r4, #4]
 8003f74:	2e00      	cmp	r6, #0
 8003f76:	bfa8      	it	ge
 8003f78:	6821      	ldrge	r1, [r4, #0]
 8003f7a:	60a6      	str	r6, [r4, #8]
 8003f7c:	bfa4      	itt	ge
 8003f7e:	f021 0104 	bicge.w	r1, r1, #4
 8003f82:	6021      	strge	r1, [r4, #0]
 8003f84:	b90d      	cbnz	r5, 8003f8a <_printf_i+0x11a>
 8003f86:	2e00      	cmp	r6, #0
 8003f88:	d04d      	beq.n	8004026 <_printf_i+0x1b6>
 8003f8a:	4616      	mov	r6, r2
 8003f8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f90:	fb03 5711 	mls	r7, r3, r1, r5
 8003f94:	5dc7      	ldrb	r7, [r0, r7]
 8003f96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f9a:	462f      	mov	r7, r5
 8003f9c:	42bb      	cmp	r3, r7
 8003f9e:	460d      	mov	r5, r1
 8003fa0:	d9f4      	bls.n	8003f8c <_printf_i+0x11c>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x14e>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07df      	lsls	r7, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x14e>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6861      	ldr	r1, [r4, #4]
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fba:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003fbe:	1b92      	subs	r2, r2, r6
 8003fc0:	6122      	str	r2, [r4, #16]
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f8cd a000 	str.w	sl, [sp]
 8003fcc:	aa03      	add	r2, sp, #12
 8003fce:	f7ff fedf 	bl	8003d90 <_printf_common>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d14c      	bne.n	8004070 <_printf_i+0x200>
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fda:	b004      	add	sp, #16
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	4834      	ldr	r0, [pc, #208]	; (80040b4 <_printf_i+0x244>)
 8003fe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fe6:	680e      	ldr	r6, [r1, #0]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fee:	061f      	lsls	r7, r3, #24
 8003ff0:	600e      	str	r6, [r1, #0]
 8003ff2:	d514      	bpl.n	800401e <_printf_i+0x1ae>
 8003ff4:	07d9      	lsls	r1, r3, #31
 8003ff6:	bf44      	itt	mi
 8003ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffc:	6023      	strmi	r3, [r4, #0]
 8003ffe:	b91d      	cbnz	r5, 8004008 <_printf_i+0x198>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2310      	movs	r3, #16
 800400a:	e7af      	b.n	8003f6c <_printf_i+0xfc>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2378      	movs	r3, #120	; 0x78
 8004016:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_printf_i+0x248>)
 8004018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401c:	e7e3      	b.n	8003fe6 <_printf_i+0x176>
 800401e:	065e      	lsls	r6, r3, #25
 8004020:	bf48      	it	mi
 8004022:	b2ad      	uxthmi	r5, r5
 8004024:	e7e6      	b.n	8003ff4 <_printf_i+0x184>
 8004026:	4616      	mov	r6, r2
 8004028:	e7bb      	b.n	8003fa2 <_printf_i+0x132>
 800402a:	680b      	ldr	r3, [r1, #0]
 800402c:	6826      	ldr	r6, [r4, #0]
 800402e:	1d1d      	adds	r5, r3, #4
 8004030:	6960      	ldr	r0, [r4, #20]
 8004032:	600d      	str	r5, [r1, #0]
 8004034:	0635      	lsls	r5, r6, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1ce>
 800403a:	6018      	str	r0, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1d4>
 800403e:	0671      	lsls	r1, r6, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ca>
 8004042:	8018      	strh	r0, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	4616      	mov	r6, r2
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	e7ba      	b.n	8003fc2 <_printf_i+0x152>
 800404c:	680b      	ldr	r3, [r1, #0]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	600a      	str	r2, [r1, #0]
 8004052:	681e      	ldr	r6, [r3, #0]
 8004054:	2100      	movs	r1, #0
 8004056:	4630      	mov	r0, r6
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	f000 f8d9 	bl	8004210 <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1f4>
 8004060:	1b80      	subs	r0, r0, r6
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406e:	e7a8      	b.n	8003fc2 <_printf_i+0x152>
 8004070:	4632      	mov	r2, r6
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ab      	beq.n	8003fd6 <_printf_i+0x166>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x23c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a4      	b.n	8003fda <_printf_i+0x16a>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09b      	beq.n	8003fd6 <_printf_i+0x166>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x220>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x214>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x230>
 80040b4:	08004505 	.word	0x08004505
 80040b8:	08004516 	.word	0x08004516

080040bc <_sbrk_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	2300      	movs	r3, #0
 80040c0:	4d05      	ldr	r5, [pc, #20]	; (80040d8 <_sbrk_r+0x1c>)
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fd f9d4 	bl	8001474 <_sbrk>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_sbrk_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_sbrk_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	2000048c 	.word	0x2000048c

080040dc <__sread>:
 80040dc:	b510      	push	{r4, lr}
 80040de:	460c      	mov	r4, r1
 80040e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e4:	f000 f8ee 	bl	80042c4 <_read_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	bfab      	itete	ge
 80040ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040ee:	89a3      	ldrhlt	r3, [r4, #12]
 80040f0:	181b      	addge	r3, r3, r0
 80040f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040f6:	bfac      	ite	ge
 80040f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80040fa:	81a3      	strhlt	r3, [r4, #12]
 80040fc:	bd10      	pop	{r4, pc}

080040fe <__swrite>:
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	461f      	mov	r7, r3
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	4605      	mov	r5, r0
 8004108:	05db      	lsls	r3, r3, #23
 800410a:	460c      	mov	r4, r1
 800410c:	4616      	mov	r6, r2
 800410e:	d505      	bpl.n	800411c <__swrite+0x1e>
 8004110:	2302      	movs	r3, #2
 8004112:	2200      	movs	r2, #0
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f868 	bl	80041ec <_lseek_r>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	4632      	mov	r2, r6
 8004120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	4628      	mov	r0, r5
 8004128:	463b      	mov	r3, r7
 800412a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	f000 b817 	b.w	8004164 <_write_r>

08004136 <__sseek>:
 8004136:	b510      	push	{r4, lr}
 8004138:	460c      	mov	r4, r1
 800413a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413e:	f000 f855 	bl	80041ec <_lseek_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	bf15      	itete	ne
 8004148:	6560      	strne	r0, [r4, #84]	; 0x54
 800414a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800414e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004152:	81a3      	strheq	r3, [r4, #12]
 8004154:	bf18      	it	ne
 8004156:	81a3      	strhne	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__sclose>:
 800415a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800415e:	f000 b813 	b.w	8004188 <_close_r>
	...

08004164 <_write_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	4611      	mov	r1, r2
 800416c:	2200      	movs	r2, #0
 800416e:	4d05      	ldr	r5, [pc, #20]	; (8004184 <_write_r+0x20>)
 8004170:	602a      	str	r2, [r5, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f7fc fdd4 	bl	8000d20 <_write>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <_write_r+0x1e>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	b103      	cbz	r3, 8004182 <_write_r+0x1e>
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	2000048c 	.word	0x2000048c

08004188 <_close_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	2300      	movs	r3, #0
 800418c:	4d05      	ldr	r5, [pc, #20]	; (80041a4 <_close_r+0x1c>)
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fd f93e 	bl	8001414 <_close>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_close_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_close_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	2000048c 	.word	0x2000048c

080041a8 <_fstat_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	2300      	movs	r3, #0
 80041ac:	4d06      	ldr	r5, [pc, #24]	; (80041c8 <_fstat_r+0x20>)
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	f7fd f938 	bl	800142a <_fstat>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d102      	bne.n	80041c4 <_fstat_r+0x1c>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	b103      	cbz	r3, 80041c4 <_fstat_r+0x1c>
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	bf00      	nop
 80041c8:	2000048c 	.word	0x2000048c

080041cc <_isatty_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	2300      	movs	r3, #0
 80041d0:	4d05      	ldr	r5, [pc, #20]	; (80041e8 <_isatty_r+0x1c>)
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fd f936 	bl	8001448 <_isatty>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_isatty_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_isatty_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	2000048c 	.word	0x2000048c

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	2200      	movs	r2, #0
 80041f6:	4d05      	ldr	r5, [pc, #20]	; (800420c <_lseek_r+0x20>)
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fd f92e 	bl	800145c <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	2000048c 	.word	0x2000048c

08004210 <memchr>:
 8004210:	4603      	mov	r3, r0
 8004212:	b510      	push	{r4, lr}
 8004214:	b2c9      	uxtb	r1, r1
 8004216:	4402      	add	r2, r0
 8004218:	4293      	cmp	r3, r2
 800421a:	4618      	mov	r0, r3
 800421c:	d101      	bne.n	8004222 <memchr+0x12>
 800421e:	2000      	movs	r0, #0
 8004220:	e003      	b.n	800422a <memchr+0x1a>
 8004222:	7804      	ldrb	r4, [r0, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	428c      	cmp	r4, r1
 8004228:	d1f6      	bne.n	8004218 <memchr+0x8>
 800422a:	bd10      	pop	{r4, pc}

0800422c <memmove>:
 800422c:	4288      	cmp	r0, r1
 800422e:	b510      	push	{r4, lr}
 8004230:	eb01 0402 	add.w	r4, r1, r2
 8004234:	d902      	bls.n	800423c <memmove+0x10>
 8004236:	4284      	cmp	r4, r0
 8004238:	4623      	mov	r3, r4
 800423a:	d807      	bhi.n	800424c <memmove+0x20>
 800423c:	1e43      	subs	r3, r0, #1
 800423e:	42a1      	cmp	r1, r4
 8004240:	d008      	beq.n	8004254 <memmove+0x28>
 8004242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800424a:	e7f8      	b.n	800423e <memmove+0x12>
 800424c:	4601      	mov	r1, r0
 800424e:	4402      	add	r2, r0
 8004250:	428a      	cmp	r2, r1
 8004252:	d100      	bne.n	8004256 <memmove+0x2a>
 8004254:	bd10      	pop	{r4, pc}
 8004256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800425a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425e:	e7f7      	b.n	8004250 <memmove+0x24>

08004260 <__malloc_lock>:
 8004260:	4801      	ldr	r0, [pc, #4]	; (8004268 <__malloc_lock+0x8>)
 8004262:	f7ff b9d5 	b.w	8003610 <__retarget_lock_acquire_recursive>
 8004266:	bf00      	nop
 8004268:	20000484 	.word	0x20000484

0800426c <__malloc_unlock>:
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <__malloc_unlock+0x8>)
 800426e:	f7ff b9d0 	b.w	8003612 <__retarget_lock_release_recursive>
 8004272:	bf00      	nop
 8004274:	20000484 	.word	0x20000484

08004278 <_realloc_r>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	4607      	mov	r7, r0
 800427c:	4614      	mov	r4, r2
 800427e:	460e      	mov	r6, r1
 8004280:	b921      	cbnz	r1, 800428c <_realloc_r+0x14>
 8004282:	4611      	mov	r1, r2
 8004284:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004288:	f7ff ba74 	b.w	8003774 <_malloc_r>
 800428c:	b922      	cbnz	r2, 8004298 <_realloc_r+0x20>
 800428e:	f7ff fa25 	bl	80036dc <_free_r>
 8004292:	4625      	mov	r5, r4
 8004294:	4628      	mov	r0, r5
 8004296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004298:	f000 f826 	bl	80042e8 <_malloc_usable_size_r>
 800429c:	42a0      	cmp	r0, r4
 800429e:	d20f      	bcs.n	80042c0 <_realloc_r+0x48>
 80042a0:	4621      	mov	r1, r4
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7ff fa66 	bl	8003774 <_malloc_r>
 80042a8:	4605      	mov	r5, r0
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d0f2      	beq.n	8004294 <_realloc_r+0x1c>
 80042ae:	4631      	mov	r1, r6
 80042b0:	4622      	mov	r2, r4
 80042b2:	f7fe fe71 	bl	8002f98 <memcpy>
 80042b6:	4631      	mov	r1, r6
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff fa0f 	bl	80036dc <_free_r>
 80042be:	e7e9      	b.n	8004294 <_realloc_r+0x1c>
 80042c0:	4635      	mov	r5, r6
 80042c2:	e7e7      	b.n	8004294 <_realloc_r+0x1c>

080042c4 <_read_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	2200      	movs	r2, #0
 80042ce:	4d05      	ldr	r5, [pc, #20]	; (80042e4 <_read_r+0x20>)
 80042d0:	602a      	str	r2, [r5, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fd f881 	bl	80013da <_read>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_read_r+0x1e>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_read_r+0x1e>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	2000048c 	.word	0x2000048c

080042e8 <_malloc_usable_size_r>:
 80042e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ec:	1f18      	subs	r0, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bfbc      	itt	lt
 80042f2:	580b      	ldrlt	r3, [r1, r0]
 80042f4:	18c0      	addlt	r0, r0, r3
 80042f6:	4770      	bx	lr

080042f8 <_init>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr

08004304 <_fini>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr
